
Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c78  08004c78  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c80  08004c80  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c84  08004c84  00014c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004060  20000010  08004c98  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004070  08004c98  00024070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001230f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002974  00000000  00000000  0003234f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00034cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00035cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023031  00000000  00000000  00036ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001319c  00000000  00000000  00059bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d754c  00000000  00000000  0006cd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001442b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004240  00000000  00000000  0014430c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ba0 	.word	0x08004ba0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004ba0 	.word	0x08004ba0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <vApplicationGetIdleTaskMemory+0x30>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	2000002c 	.word	0x2000002c
 8000554:	20000080 	.word	0x20000080

08000558 <Send_Uart_Give_Mutex>:
void HPT_Task(void *argument);
void MPT_Task(void *argument);


void Send_Uart_Give_Mutex(char *str)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(Mutex, portMAX_DELAY);
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <Send_Uart_Give_Mutex+0x4c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f04f 31ff 	mov.w	r1, #4294967295
 8000568:	4618      	mov	r0, r3
 800056a:	f002 fced 	bl	8002f48 <xQueueSemaphoreTake>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff fe4e 	bl	8000210 <strlen>
 8000574:	4603      	mov	r3, r0
 8000576:	b29a      	uxth	r2, r3
 8000578:	f04f 33ff 	mov.w	r3, #4294967295
 800057c:	6879      	ldr	r1, [r7, #4]
 800057e:	480a      	ldr	r0, [pc, #40]	; (80005a8 <Send_Uart_Give_Mutex+0x50>)
 8000580:	f001 fec7 	bl	8002312 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000584:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000588:	f000 fb14 	bl	8000bb4 <HAL_Delay>
	xSemaphoreGive(Mutex);
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <Send_Uart_Give_Mutex+0x4c>)
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	f002 fbd9 	bl	8002d4c <xQueueGenericSend>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200002c4 	.word	0x200002c4
 80005a8:	20000280 	.word	0x20000280

080005ac <main>:

int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fabd 	bl	8000b30 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f83f 	bl	8000638 <SystemClock_Config>



  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8d5 	bl	8000768 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f8a9 	bl	8000714 <MX_USART2_UART_Init>

  Mutex = xSemaphoreCreateMutex();
 80005c2:	2001      	movs	r0, #1
 80005c4:	f002 fba9 	bl	8002d1a <xQueueCreateMutex>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <main+0x68>)
 80005cc:	6013      	str	r3, [r2, #0]

  if(Mutex != NULL)
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <main+0x68>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d006      	beq.n	80005e4 <main+0x38>
  {
	  HAL_UART_Transmit(&huart2,(uint8_t*) "Mutex Created", 15, 1000);
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	220f      	movs	r2, #15
 80005dc:	490e      	ldr	r1, [pc, #56]	; (8000618 <main+0x6c>)
 80005de:	480f      	ldr	r0, [pc, #60]	; (800061c <main+0x70>)
 80005e0:	f001 fe97 	bl	8002312 <HAL_UART_Transmit>
  }

  /*Create Tasks*/
  xTaskCreate(HPT_Task, "HPT", 128, NULL, 1, &HPT_Handler);
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <main+0x74>)
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	2301      	movs	r3, #1
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2300      	movs	r3, #0
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	490c      	ldr	r1, [pc, #48]	; (8000624 <main+0x78>)
 80005f2:	480d      	ldr	r0, [pc, #52]	; (8000628 <main+0x7c>)
 80005f4:	f002 ff13 	bl	800341e <xTaskCreate>
  xTaskCreate(MPT_Task, "MPT", 128, NULL, 2, &MPT_Handler);
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <main+0x80>)
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	490a      	ldr	r1, [pc, #40]	; (8000630 <main+0x84>)
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <main+0x88>)
 8000608:	f002 ff09 	bl	800341e <xTaskCreate>


  vTaskStartScheduler();
 800060c:	f003 f872 	bl	80036f4 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x64>
 8000612:	bf00      	nop
 8000614:	200002c4 	.word	0x200002c4
 8000618:	08004bb8 	.word	0x08004bb8
 800061c:	20000280 	.word	0x20000280
 8000620:	200002c8 	.word	0x200002c8
 8000624:	08004bc8 	.word	0x08004bc8
 8000628:	080007b9 	.word	0x080007b9
 800062c:	200002cc 	.word	0x200002cc
 8000630:	08004bcc 	.word	0x08004bcc
 8000634:	08000819 	.word	0x08000819

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2234      	movs	r2, #52	; 0x34
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 faa2 	bl	8004b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b2a      	ldr	r3, [pc, #168]	; (800070c <SystemClock_Config+0xd4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a29      	ldr	r2, [pc, #164]	; (800070c <SystemClock_Config+0xd4>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b27      	ldr	r3, [pc, #156]	; (800070c <SystemClock_Config+0xd4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000678:	2300      	movs	r3, #0
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <SystemClock_Config+0xd8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000684:	4a22      	ldr	r2, [pc, #136]	; (8000710 <SystemClock_Config+0xd8>)
 8000686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <SystemClock_Config+0xd8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f88b 	bl	80017e0 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006d0:	f000 f8e4 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2103      	movs	r1, #3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fcf8 	bl	80010e8 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006fe:	f000 f8cd 	bl	800089c <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART2_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800074c:	f001 fd94 	bl	8002278 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f8a1 	bl	800089c <Error_Handler>
  }


}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000280 	.word	0x20000280
 8000764:	40004400 	.word	0x40004400

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_GPIO_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <MX_GPIO_Init+0x4c>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_GPIO_Init+0x4c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_GPIO_Init+0x4c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <MX_GPIO_Init+0x4c>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_GPIO_Init+0x4c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <HPT_Task>:

void HPT_Task(void *argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	char *strtosend = "Executing HPT.......";
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <HPT_Task+0x50>)
 80007c2:	617b      	str	r3, [r7, #20]
	while(1)
	{
		char *str = "Entered HPT and Getting Mutex\n";
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <HPT_Task+0x54>)
 80007c6:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80007c8:	6938      	ldr	r0, [r7, #16]
 80007ca:	f7ff fd21 	bl	8000210 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	6939      	ldr	r1, [r7, #16]
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <HPT_Task+0x58>)
 80007da:	f001 fd9a 	bl	8002312 <HAL_UART_Transmit>

		Send_Uart_Give_Mutex(strtosend);
 80007de:	6978      	ldr	r0, [r7, #20]
 80007e0:	f7ff feba 	bl	8000558 <Send_Uart_Give_Mutex>

		char *str2 = "Leaving HPT";
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HPT_Task+0x5c>)
 80007e6:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str2), HAL_MAX_DELAY);
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f7ff fd11 	bl	8000210 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295
 80007f6:	6939      	ldr	r1, [r7, #16]
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <HPT_Task+0x58>)
 80007fa:	f001 fd8a 	bl	8002312 <HAL_UART_Transmit>

		vTaskDelay(1500);
 80007fe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000802:	f002 ff43 	bl	800368c <vTaskDelay>
	{
 8000806:	e7dd      	b.n	80007c4 <HPT_Task+0xc>
 8000808:	08004bd0 	.word	0x08004bd0
 800080c:	08004be8 	.word	0x08004be8
 8000810:	20000280 	.word	0x20000280
 8000814:	08004c08 	.word	0x08004c08

08000818 <MPT_Task>:
	}
}

void MPT_Task(void *argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	char *strtosend = "Executing MPT.......";
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MPT_Task+0x50>)
 8000822:	617b      	str	r3, [r7, #20]
	while(1)
	{
		char *str = "Entered MPT and Getting Mutex\n";
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MPT_Task+0x54>)
 8000826:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000828:	6938      	ldr	r0, [r7, #16]
 800082a:	f7ff fcf1 	bl	8000210 <strlen>
 800082e:	4603      	mov	r3, r0
 8000830:	b29a      	uxth	r2, r3
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	6939      	ldr	r1, [r7, #16]
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <MPT_Task+0x58>)
 800083a:	f001 fd6a 	bl	8002312 <HAL_UART_Transmit>

		Send_Uart_Give_Mutex(strtosend);
 800083e:	6978      	ldr	r0, [r7, #20]
 8000840:	f7ff fe8a 	bl	8000558 <Send_Uart_Give_Mutex>

		char *str2 = "Leaving MPT";
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MPT_Task+0x5c>)
 8000846:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str2), HAL_MAX_DELAY);
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f7ff fce1 	bl	8000210 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	6939      	ldr	r1, [r7, #16]
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MPT_Task+0x58>)
 800085a:	f001 fd5a 	bl	8002312 <HAL_UART_Transmit>

		vTaskDelay(2000);
 800085e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000862:	f002 ff13 	bl	800368c <vTaskDelay>
	{
 8000866:	e7dd      	b.n	8000824 <MPT_Task+0xc>
 8000868:	08004c14 	.word	0x08004c14
 800086c:	08004c2c 	.word	0x08004c2c
 8000870:	20000280 	.word	0x20000280
 8000874:	08004c4c 	.word	0x08004c4c

08000878 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d101      	bne.n	800088e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800088a:	f000 f973 	bl	8000b74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40010000 	.word	0x40010000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_MspInit+0x54>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <HAL_MspInit+0x54>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x54>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_MspInit+0x54>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_MspInit+0x54>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_MspInit+0x54>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	210f      	movs	r1, #15
 80008ea:	f06f 0001 	mvn.w	r0, #1
 80008ee:	f000 fa3d 	bl	8000d6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <HAL_UART_MspInit+0x84>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12b      	bne.n	800097a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <HAL_UART_MspInit+0x88>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800095a:	230c      	movs	r3, #12
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096a:	2307      	movs	r3, #7
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_UART_MspInit+0x8c>)
 8000976:	f000 fa23 	bl	8000dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40004400 	.word	0x40004400
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <HAL_InitTick+0xd4>)
 80009a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a8:	4a2e      	ldr	r2, [pc, #184]	; (8000a64 <HAL_InitTick+0xd4>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6453      	str	r3, [r2, #68]	; 0x44
 80009b0:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <HAL_InitTick+0xd4>)
 80009b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009bc:	f107 020c 	add.w	r2, r7, #12
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fca8 	bl	800131c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009cc:	f000 fc92 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 80009d0:	4603      	mov	r3, r0
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <HAL_InitTick+0xd8>)
 80009da:	fba2 2303 	umull	r2, r3, r2, r3
 80009de:	0c9b      	lsrs	r3, r3, #18
 80009e0:	3b01      	subs	r3, #1
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009e4:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <HAL_InitTick+0xdc>)
 80009e6:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <HAL_InitTick+0xe0>)
 80009e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <HAL_InitTick+0xdc>)
 80009ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009f2:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <HAL_InitTick+0xdc>)
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <HAL_InitTick+0xdc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <HAL_InitTick+0xdc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <HAL_InitTick+0xdc>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a0a:	4818      	ldr	r0, [pc, #96]	; (8000a6c <HAL_InitTick+0xdc>)
 8000a0c:	f001 f986 	bl	8001d1c <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d11b      	bne.n	8000a56 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a1e:	4813      	ldr	r0, [pc, #76]	; (8000a6c <HAL_InitTick+0xdc>)
 8000a20:	f001 f9d6 	bl	8001dd0 <HAL_TIM_Base_Start_IT>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d111      	bne.n	8000a56 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a32:	2019      	movs	r0, #25
 8000a34:	f000 f9b6 	bl	8000da4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	d808      	bhi.n	8000a50 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	6879      	ldr	r1, [r7, #4]
 8000a42:	2019      	movs	r0, #25
 8000a44:	f000 f992 	bl	8000d6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_InitTick+0xe4>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e002      	b.n	8000a56 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3730      	adds	r7, #48	; 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	431bde83 	.word	0x431bde83
 8000a6c:	200002d0 	.word	0x200002d0
 8000a70:	40010000 	.word	0x40010000
 8000a74:	20000004 	.word	0x20000004

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000aaa:	f001 fa01 	bl	8001eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200002d0 	.word	0x200002d0

08000ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SystemInit+0x20>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SystemInit+0x20>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ae2:	490e      	ldr	r1, [pc, #56]	; (8000b1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af8:	4c0b      	ldr	r4, [pc, #44]	; (8000b28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b06:	f7ff ffd7 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f004 f80f 	bl	8004b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0e:	f7ff fd4d 	bl	80005ac <main>
  bx  lr    
 8000b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b20:	08004c88 	.word	0x08004c88
  ldr r2, =_sbss
 8000b24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b28:	20004070 	.word	0x20004070

08000b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <HAL_Init+0x40>)
 8000b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_Init+0x40>)
 8000b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_Init+0x40>)
 8000b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f8fc 	bl	8000d56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	200f      	movs	r0, #15
 8000b60:	f7ff ff16 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fea0 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023c00 	.word	0x40023c00

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000318 	.word	0x20000318

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000318 	.word	0x20000318

08000bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bbc:	f7ff ffee 	bl	8000b9c <HAL_GetTick>
 8000bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bcc:	d005      	beq.n	8000bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_Delay+0x44>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bda:	bf00      	nop
 8000bdc:	f7ff ffde 	bl	8000b9c <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d8f7      	bhi.n	8000bdc <HAL_Delay+0x28>
  {
  }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 021f 	and.w	r2, r3, #31
 8000c78:	4907      	ldr	r1, [pc, #28]	; (8000c98 <__NVIC_EnableIRQ+0x38>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	; 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ff4c 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7e:	f7ff ff61 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000d82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	6978      	ldr	r0, [r7, #20]
 8000d8a:	f7ff ffb1 	bl	8000cf0 <NVIC_EncodePriority>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff80 	bl	8000c9c <__NVIC_SetPriority>
}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff54 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	e165      	b.n	80010a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	f040 8154 	bne.w	80010a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d005      	beq.n	8000e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d130      	bne.n	8000e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	f003 0201 	and.w	r2, r3, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d017      	beq.n	8000eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d123      	bne.n	8000f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	69b9      	ldr	r1, [r7, #24]
 8000f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0203 	and.w	r2, r3, #3
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80ae 	beq.w	80010a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b5d      	ldr	r3, [pc, #372]	; (80010c0 <HAL_GPIO_Init+0x300>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a5c      	ldr	r2, [pc, #368]	; (80010c0 <HAL_GPIO_Init+0x300>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b5a      	ldr	r3, [pc, #360]	; (80010c0 <HAL_GPIO_Init+0x300>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f62:	4a58      	ldr	r2, [pc, #352]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4f      	ldr	r2, [pc, #316]	; (80010c8 <HAL_GPIO_Init+0x308>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d025      	beq.n	8000fda <HAL_GPIO_Init+0x21a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4e      	ldr	r2, [pc, #312]	; (80010cc <HAL_GPIO_Init+0x30c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d01f      	beq.n	8000fd6 <HAL_GPIO_Init+0x216>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4d      	ldr	r2, [pc, #308]	; (80010d0 <HAL_GPIO_Init+0x310>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d019      	beq.n	8000fd2 <HAL_GPIO_Init+0x212>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_GPIO_Init+0x314>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0x20e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4b      	ldr	r2, [pc, #300]	; (80010d8 <HAL_GPIO_Init+0x318>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d00d      	beq.n	8000fca <HAL_GPIO_Init+0x20a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4a      	ldr	r2, [pc, #296]	; (80010dc <HAL_GPIO_Init+0x31c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d007      	beq.n	8000fc6 <HAL_GPIO_Init+0x206>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a49      	ldr	r2, [pc, #292]	; (80010e0 <HAL_GPIO_Init+0x320>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_GPIO_Init+0x202>
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	e00c      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	e00a      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	e008      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fca:	2304      	movs	r3, #4
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e004      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	f002 0203 	and.w	r2, r2, #3
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fec:	4935      	ldr	r1, [pc, #212]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <HAL_GPIO_Init+0x324>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101e:	4a31      	ldr	r2, [pc, #196]	; (80010e4 <HAL_GPIO_Init+0x324>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001024:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <HAL_GPIO_Init+0x324>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001048:	4a26      	ldr	r2, [pc, #152]	; (80010e4 <HAL_GPIO_Init+0x324>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800104e:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <HAL_GPIO_Init+0x324>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001072:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <HAL_GPIO_Init+0x324>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_GPIO_Init+0x324>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109c:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <HAL_GPIO_Init+0x324>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3301      	adds	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	2b0f      	cmp	r3, #15
 80010ac:	f67f ae96 	bls.w	8000ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40013800 	.word	0x40013800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40020c00 	.word	0x40020c00
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40021400 	.word	0x40021400
 80010e0:	40021800 	.word	0x40021800
 80010e4:	40013c00 	.word	0x40013c00

080010e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0cc      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010fc:	4b68      	ldr	r3, [pc, #416]	; (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d90c      	bls.n	8001124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110a:	4b65      	ldr	r3, [pc, #404]	; (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001112:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d001      	beq.n	8001124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e0b8      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d020      	beq.n	8001172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800113c:	4b59      	ldr	r3, [pc, #356]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a58      	ldr	r2, [pc, #352]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001154:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a52      	ldr	r2, [pc, #328]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800115e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001160:	4b50      	ldr	r3, [pc, #320]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	494d      	ldr	r1, [pc, #308]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	4313      	orrs	r3, r2
 8001170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d044      	beq.n	8001208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d119      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e07f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d003      	beq.n	80011a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d107      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a6:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d109      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e06f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e067      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011c6:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f023 0203 	bic.w	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4934      	ldr	r1, [pc, #208]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d8:	f7ff fce0 	bl	8000b9c <HAL_GetTick>
 80011dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011de:	e00a      	b.n	80011f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e0:	f7ff fcdc 	bl	8000b9c <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e04f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f6:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 020c 	and.w	r2, r3, #12
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	429a      	cmp	r2, r3
 8001206:	d1eb      	bne.n	80011e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d20c      	bcs.n	8001230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e032      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4916      	ldr	r1, [pc, #88]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	4313      	orrs	r3, r2
 800124c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	490e      	ldr	r1, [pc, #56]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	4313      	orrs	r3, r2
 800126c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800126e:	f000 f887 	bl	8001380 <HAL_RCC_GetSysClockFreq>
 8001272:	4602      	mov	r2, r0
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	490a      	ldr	r1, [pc, #40]	; (80012a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	5ccb      	ldrb	r3, [r1, r3]
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	4a09      	ldr	r2, [pc, #36]	; (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_RCC_ClockConfig+0x1c8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb7e 	bl	8000990 <HAL_InitTick>

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00
 80012a4:	40023800 	.word	0x40023800
 80012a8:	08004c60 	.word	0x08004c60
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000004 	.word	0x20000004

080012b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000000 	.word	0x20000000

080012cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012d0:	f7ff fff0 	bl	80012b4 <HAL_RCC_GetHCLKFreq>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	0a9b      	lsrs	r3, r3, #10
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	4903      	ldr	r1, [pc, #12]	; (80012f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012e2:	5ccb      	ldrb	r3, [r1, r3]
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	08004c70 	.word	0x08004c70

080012f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012f8:	f7ff ffdc 	bl	80012b4 <HAL_RCC_GetHCLKFreq>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	0b5b      	lsrs	r3, r3, #13
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	4903      	ldr	r1, [pc, #12]	; (8001318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800130a:	5ccb      	ldrb	r3, [r1, r3]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	08004c70 	.word	0x08004c70

0800131c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	220f      	movs	r2, #15
 800132a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_RCC_GetClockConfig+0x5c>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0203 	and.w	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_RCC_GetClockConfig+0x5c>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_RCC_GetClockConfig+0x5c>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_RCC_GetClockConfig+0x5c>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	08db      	lsrs	r3, r3, #3
 8001356:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <HAL_RCC_GetClockConfig+0x60>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 020f 	and.w	r2, r3, #15
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	601a      	str	r2, [r3, #0]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40023c00 	.word	0x40023c00

08001380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001384:	b0ae      	sub	sp, #184	; 0xb8
 8001386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a6:	4bcb      	ldr	r3, [pc, #812]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b0c      	cmp	r3, #12
 80013b0:	f200 8206 	bhi.w	80017c0 <HAL_RCC_GetSysClockFreq+0x440>
 80013b4:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80013b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ba:	bf00      	nop
 80013bc:	080013f1 	.word	0x080013f1
 80013c0:	080017c1 	.word	0x080017c1
 80013c4:	080017c1 	.word	0x080017c1
 80013c8:	080017c1 	.word	0x080017c1
 80013cc:	080013f9 	.word	0x080013f9
 80013d0:	080017c1 	.word	0x080017c1
 80013d4:	080017c1 	.word	0x080017c1
 80013d8:	080017c1 	.word	0x080017c1
 80013dc:	08001401 	.word	0x08001401
 80013e0:	080017c1 	.word	0x080017c1
 80013e4:	080017c1 	.word	0x080017c1
 80013e8:	080017c1 	.word	0x080017c1
 80013ec:	080015f1 	.word	0x080015f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013f0:	4bb9      	ldr	r3, [pc, #740]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80013f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80013f6:	e1e7      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013f8:	4bb8      	ldr	r3, [pc, #736]	; (80016dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80013fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013fe:	e1e3      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001400:	4bb4      	ldr	r3, [pc, #720]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800140c:	4bb1      	ldr	r3, [pc, #708]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d071      	beq.n	80014fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001418:	4bae      	ldr	r3, [pc, #696]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	099b      	lsrs	r3, r3, #6
 800141e:	2200      	movs	r2, #0
 8001420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001424:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800142c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001430:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800143a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800143e:	4622      	mov	r2, r4
 8001440:	462b      	mov	r3, r5
 8001442:	f04f 0000 	mov.w	r0, #0
 8001446:	f04f 0100 	mov.w	r1, #0
 800144a:	0159      	lsls	r1, r3, #5
 800144c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001450:	0150      	lsls	r0, r2, #5
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4621      	mov	r1, r4
 8001458:	1a51      	subs	r1, r2, r1
 800145a:	6439      	str	r1, [r7, #64]	; 0x40
 800145c:	4629      	mov	r1, r5
 800145e:	eb63 0301 	sbc.w	r3, r3, r1
 8001462:	647b      	str	r3, [r7, #68]	; 0x44
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001470:	4649      	mov	r1, r9
 8001472:	018b      	lsls	r3, r1, #6
 8001474:	4641      	mov	r1, r8
 8001476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800147a:	4641      	mov	r1, r8
 800147c:	018a      	lsls	r2, r1, #6
 800147e:	4641      	mov	r1, r8
 8001480:	1a51      	subs	r1, r2, r1
 8001482:	63b9      	str	r1, [r7, #56]	; 0x38
 8001484:	4649      	mov	r1, r9
 8001486:	eb63 0301 	sbc.w	r3, r3, r1
 800148a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001498:	4649      	mov	r1, r9
 800149a:	00cb      	lsls	r3, r1, #3
 800149c:	4641      	mov	r1, r8
 800149e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014a2:	4641      	mov	r1, r8
 80014a4:	00ca      	lsls	r2, r1, #3
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	4622      	mov	r2, r4
 80014ae:	189b      	adds	r3, r3, r2
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
 80014b2:	462b      	mov	r3, r5
 80014b4:	460a      	mov	r2, r1
 80014b6:	eb42 0303 	adc.w	r3, r2, r3
 80014ba:	637b      	str	r3, [r7, #52]	; 0x34
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014c8:	4629      	mov	r1, r5
 80014ca:	024b      	lsls	r3, r1, #9
 80014cc:	4621      	mov	r1, r4
 80014ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014d2:	4621      	mov	r1, r4
 80014d4:	024a      	lsls	r2, r1, #9
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014de:	2200      	movs	r2, #0
 80014e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80014ec:	f7fe fe98 	bl	8000220 <__aeabi_uldivmod>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4613      	mov	r3, r2
 80014f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014fa:	e067      	b.n	80015cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fc:	4b75      	ldr	r3, [pc, #468]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	099b      	lsrs	r3, r3, #6
 8001502:	2200      	movs	r2, #0
 8001504:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001508:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800150c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001514:	67bb      	str	r3, [r7, #120]	; 0x78
 8001516:	2300      	movs	r3, #0
 8001518:	67fb      	str	r3, [r7, #124]	; 0x7c
 800151a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800151e:	4622      	mov	r2, r4
 8001520:	462b      	mov	r3, r5
 8001522:	f04f 0000 	mov.w	r0, #0
 8001526:	f04f 0100 	mov.w	r1, #0
 800152a:	0159      	lsls	r1, r3, #5
 800152c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001530:	0150      	lsls	r0, r2, #5
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4621      	mov	r1, r4
 8001538:	1a51      	subs	r1, r2, r1
 800153a:	62b9      	str	r1, [r7, #40]	; 0x28
 800153c:	4629      	mov	r1, r5
 800153e:	eb63 0301 	sbc.w	r3, r3, r1
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001550:	4649      	mov	r1, r9
 8001552:	018b      	lsls	r3, r1, #6
 8001554:	4641      	mov	r1, r8
 8001556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800155a:	4641      	mov	r1, r8
 800155c:	018a      	lsls	r2, r1, #6
 800155e:	4641      	mov	r1, r8
 8001560:	ebb2 0a01 	subs.w	sl, r2, r1
 8001564:	4649      	mov	r1, r9
 8001566:	eb63 0b01 	sbc.w	fp, r3, r1
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001576:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800157a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800157e:	4692      	mov	sl, r2
 8001580:	469b      	mov	fp, r3
 8001582:	4623      	mov	r3, r4
 8001584:	eb1a 0303 	adds.w	r3, sl, r3
 8001588:	623b      	str	r3, [r7, #32]
 800158a:	462b      	mov	r3, r5
 800158c:	eb4b 0303 	adc.w	r3, fp, r3
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800159e:	4629      	mov	r1, r5
 80015a0:	028b      	lsls	r3, r1, #10
 80015a2:	4621      	mov	r1, r4
 80015a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015a8:	4621      	mov	r1, r4
 80015aa:	028a      	lsls	r2, r1, #10
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015b4:	2200      	movs	r2, #0
 80015b6:	673b      	str	r3, [r7, #112]	; 0x70
 80015b8:	677a      	str	r2, [r7, #116]	; 0x74
 80015ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015be:	f7fe fe2f 	bl	8000220 <__aeabi_uldivmod>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4613      	mov	r3, r2
 80015c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015cc:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	3301      	adds	r3, #1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80015de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015ee:	e0eb      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f0:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015fc:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d06b      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001608:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	2200      	movs	r2, #0
 8001610:	66bb      	str	r3, [r7, #104]	; 0x68
 8001612:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161a:	663b      	str	r3, [r7, #96]	; 0x60
 800161c:	2300      	movs	r3, #0
 800161e:	667b      	str	r3, [r7, #100]	; 0x64
 8001620:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001624:	4622      	mov	r2, r4
 8001626:	462b      	mov	r3, r5
 8001628:	f04f 0000 	mov.w	r0, #0
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	0159      	lsls	r1, r3, #5
 8001632:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001636:	0150      	lsls	r0, r2, #5
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4621      	mov	r1, r4
 800163e:	1a51      	subs	r1, r2, r1
 8001640:	61b9      	str	r1, [r7, #24]
 8001642:	4629      	mov	r1, r5
 8001644:	eb63 0301 	sbc.w	r3, r3, r1
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001656:	4659      	mov	r1, fp
 8001658:	018b      	lsls	r3, r1, #6
 800165a:	4651      	mov	r1, sl
 800165c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001660:	4651      	mov	r1, sl
 8001662:	018a      	lsls	r2, r1, #6
 8001664:	4651      	mov	r1, sl
 8001666:	ebb2 0801 	subs.w	r8, r2, r1
 800166a:	4659      	mov	r1, fp
 800166c:	eb63 0901 	sbc.w	r9, r3, r1
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800167c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001680:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001684:	4690      	mov	r8, r2
 8001686:	4699      	mov	r9, r3
 8001688:	4623      	mov	r3, r4
 800168a:	eb18 0303 	adds.w	r3, r8, r3
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	462b      	mov	r3, r5
 8001692:	eb49 0303 	adc.w	r3, r9, r3
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016a4:	4629      	mov	r1, r5
 80016a6:	024b      	lsls	r3, r1, #9
 80016a8:	4621      	mov	r1, r4
 80016aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016ae:	4621      	mov	r1, r4
 80016b0:	024a      	lsls	r2, r1, #9
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016ba:	2200      	movs	r2, #0
 80016bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80016be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016c4:	f7fe fdac 	bl	8000220 <__aeabi_uldivmod>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4613      	mov	r3, r2
 80016ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016d2:	e065      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x420>
 80016d4:	40023800 	.word	0x40023800
 80016d8:	00f42400 	.word	0x00f42400
 80016dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e0:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	2200      	movs	r2, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	4611      	mov	r1, r2
 80016ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016f0:	653b      	str	r3, [r7, #80]	; 0x50
 80016f2:	2300      	movs	r3, #0
 80016f4:	657b      	str	r3, [r7, #84]	; 0x54
 80016f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80016fa:	4642      	mov	r2, r8
 80016fc:	464b      	mov	r3, r9
 80016fe:	f04f 0000 	mov.w	r0, #0
 8001702:	f04f 0100 	mov.w	r1, #0
 8001706:	0159      	lsls	r1, r3, #5
 8001708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800170c:	0150      	lsls	r0, r2, #5
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4641      	mov	r1, r8
 8001714:	1a51      	subs	r1, r2, r1
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	4649      	mov	r1, r9
 800171a:	eb63 0301 	sbc.w	r3, r3, r1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800172c:	4659      	mov	r1, fp
 800172e:	018b      	lsls	r3, r1, #6
 8001730:	4651      	mov	r1, sl
 8001732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001736:	4651      	mov	r1, sl
 8001738:	018a      	lsls	r2, r1, #6
 800173a:	4651      	mov	r1, sl
 800173c:	1a54      	subs	r4, r2, r1
 800173e:	4659      	mov	r1, fp
 8001740:	eb63 0501 	sbc.w	r5, r3, r1
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	00eb      	lsls	r3, r5, #3
 800174e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001752:	00e2      	lsls	r2, r4, #3
 8001754:	4614      	mov	r4, r2
 8001756:	461d      	mov	r5, r3
 8001758:	4643      	mov	r3, r8
 800175a:	18e3      	adds	r3, r4, r3
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	464b      	mov	r3, r9
 8001760:	eb45 0303 	adc.w	r3, r5, r3
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001772:	4629      	mov	r1, r5
 8001774:	028b      	lsls	r3, r1, #10
 8001776:	4621      	mov	r1, r4
 8001778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800177c:	4621      	mov	r1, r4
 800177e:	028a      	lsls	r2, r1, #10
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001788:	2200      	movs	r2, #0
 800178a:	64bb      	str	r3, [r7, #72]	; 0x48
 800178c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800178e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001792:	f7fe fd45 	bl	8000220 <__aeabi_uldivmod>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4613      	mov	r3, r2
 800179c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	0f1b      	lsrs	r3, r3, #28
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017be:	e003      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_RCC_GetSysClockFreq+0x45c>)
 80017c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	37b8      	adds	r7, #184	; 0xb8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	00f42400 	.word	0x00f42400

080017e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e28d      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8083 	beq.w	8001906 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001800:	4b94      	ldr	r3, [pc, #592]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b04      	cmp	r3, #4
 800180a:	d019      	beq.n	8001840 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800180c:	4b91      	ldr	r3, [pc, #580]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001814:	2b08      	cmp	r3, #8
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001818:	4b8e      	ldr	r3, [pc, #568]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001824:	d00c      	beq.n	8001840 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001826:	4b8b      	ldr	r3, [pc, #556]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d112      	bne.n	8001858 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001832:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800183e:	d10b      	bne.n	8001858 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	4b84      	ldr	r3, [pc, #528]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d05b      	beq.n	8001904 <HAL_RCC_OscConfig+0x124>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d157      	bne.n	8001904 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e25a      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001860:	d106      	bne.n	8001870 <HAL_RCC_OscConfig+0x90>
 8001862:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a7b      	ldr	r2, [pc, #492]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e01d      	b.n	80018ac <HAL_RCC_OscConfig+0xcc>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0xb4>
 800187a:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a75      	ldr	r2, [pc, #468]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b73      	ldr	r3, [pc, #460]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a72      	ldr	r2, [pc, #456]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 800188c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0xcc>
 8001894:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a6e      	ldr	r2, [pc, #440]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 800189a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b6c      	ldr	r3, [pc, #432]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a6b      	ldr	r2, [pc, #428]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80018a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d013      	beq.n	80018dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff f972 	bl	8000b9c <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff f96e 	bl	8000b9c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	; 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e21f      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	4b61      	ldr	r3, [pc, #388]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0xdc>
 80018da:	e014      	b.n	8001906 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff f95e 	bl	8000b9c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff f95a 	bl	8000b9c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e20b      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	4b57      	ldr	r3, [pc, #348]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x104>
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d06f      	beq.n	80019f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001912:	4b50      	ldr	r3, [pc, #320]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b00      	cmp	r3, #0
 800191c:	d017      	beq.n	800194e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800191e:	4b4d      	ldr	r3, [pc, #308]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001926:	2b08      	cmp	r3, #8
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800192a:	4b4a      	ldr	r3, [pc, #296]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d11c      	bne.n	800197c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001942:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x186>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e1d3      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4937      	ldr	r1, [pc, #220]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	e03a      	b.n	80019f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_RCC_OscConfig+0x278>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff f907 	bl	8000b9c <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff f903 	bl	8000b9c <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e1b4      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4925      	ldr	r1, [pc, #148]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <HAL_RCC_OscConfig+0x278>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff f8e6 	bl	8000b9c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff f8e2 	bl	8000b9c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e193      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d036      	beq.n	8001a6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d016      	beq.n	8001a34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_RCC_OscConfig+0x27c>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7ff f8c6 	bl	8000b9c <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff f8c2 	bl	8000b9c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e173      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x234>
 8001a32:	e01b      	b.n	8001a6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_OscConfig+0x27c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	f7ff f8af 	bl	8000b9c <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a40:	e00e      	b.n	8001a60 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a42:	f7ff f8ab 	bl	8000b9c <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d907      	bls.n	8001a60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e15c      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
 8001a54:	40023800 	.word	0x40023800
 8001a58:	42470000 	.word	0x42470000
 8001a5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	4b8a      	ldr	r3, [pc, #552]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ea      	bne.n	8001a42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8097 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7e:	4b83      	ldr	r3, [pc, #524]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10f      	bne.n	8001aaa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	4b7f      	ldr	r3, [pc, #508]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	4a7e      	ldr	r2, [pc, #504]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9a:	4b7c      	ldr	r3, [pc, #496]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	4b79      	ldr	r3, [pc, #484]	; (8001c90 <HAL_RCC_OscConfig+0x4b0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d118      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab6:	4b76      	ldr	r3, [pc, #472]	; (8001c90 <HAL_RCC_OscConfig+0x4b0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a75      	ldr	r2, [pc, #468]	; (8001c90 <HAL_RCC_OscConfig+0x4b0>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f86b 	bl	8000b9c <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aca:	f7ff f867 	bl	8000b9c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e118      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	4b6c      	ldr	r3, [pc, #432]	; (8001c90 <HAL_RCC_OscConfig+0x4b0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x31e>
 8001af0:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	4a65      	ldr	r2, [pc, #404]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	; 0x70
 8001afc:	e01c      	b.n	8001b38 <HAL_RCC_OscConfig+0x358>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x340>
 8001b06:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0a:	4a60      	ldr	r2, [pc, #384]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6713      	str	r3, [r2, #112]	; 0x70
 8001b12:	4b5e      	ldr	r3, [pc, #376]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	4a5d      	ldr	r2, [pc, #372]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0x358>
 8001b20:	4b5a      	ldr	r3, [pc, #360]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	4a59      	ldr	r2, [pc, #356]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2c:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b30:	4a56      	ldr	r2, [pc, #344]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b32:	f023 0304 	bic.w	r3, r3, #4
 8001b36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d015      	beq.n	8001b6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff f82c 	bl	8000b9c <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7ff f828 	bl	8000b9c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e0d7      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0ee      	beq.n	8001b48 <HAL_RCC_OscConfig+0x368>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f816 	bl	8000b9c <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7ff f812 	bl	8000b9c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e0c1      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8a:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ee      	bne.n	8001b74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9c:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	4a3a      	ldr	r2, [pc, #232]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80ad 	beq.w	8001d0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb2:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d060      	beq.n	8001c80 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d145      	bne.n	8001c52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <HAL_RCC_OscConfig+0x4b4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7fe ffe6 	bl	8000b9c <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7fe ffe2 	bl	8000b9c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e093      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69da      	ldr	r2, [r3, #28]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	019b      	lsls	r3, r3, #6
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	041b      	lsls	r3, r3, #16
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	061b      	lsls	r3, r3, #24
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	071b      	lsls	r3, r3, #28
 8001c1e:	491b      	ldr	r1, [pc, #108]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <HAL_RCC_OscConfig+0x4b4>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7fe ffb7 	bl	8000b9c <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c32:	f7fe ffb3 	bl	8000b9c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e064      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x452>
 8001c50:	e05c      	b.n	8001d0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_RCC_OscConfig+0x4b4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7fe ffa0 	bl	8000b9c <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c60:	f7fe ff9c 	bl	8000b9c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e04d      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x480>
 8001c7e:	e045      	b.n	8001d0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e040      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40007000 	.word	0x40007000
 8001c94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <HAL_RCC_OscConfig+0x538>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d030      	beq.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d129      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d122      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d119      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	085b      	lsrs	r3, r3, #1
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d10f      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e041      	b.n	8001db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f839 	bl	8001dba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3304      	adds	r3, #4
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f000 f9d8 	bl	8002110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d001      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e04e      	b.n	8001e86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d022      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e12:	d01d      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d018      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <HAL_TIM_Base_Start_IT+0xcc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d013      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00e      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d009      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d004      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a18      	ldr	r2, [pc, #96]	; (8001eac <HAL_TIM_Base_Start_IT+0xdc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d111      	bne.n	8001e74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d010      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e72:	e007      	b.n	8001e84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40010000 	.word	0x40010000
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40000800 	.word	0x40000800
 8001ea0:	40000c00 	.word	0x40000c00
 8001ea4:	40010400 	.word	0x40010400
 8001ea8:	40014000 	.word	0x40014000
 8001eac:	40001800 	.word	0x40001800

08001eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d122      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d11b      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0202 	mvn.w	r2, #2
 8001edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8ee 	bl	80020d4 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8e0 	bl	80020c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8f1 	bl	80020e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d122      	bne.n	8001f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d11b      	bne.n	8001f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0204 	mvn.w	r2, #4
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8c4 	bl	80020d4 <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8b6 	bl	80020c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f8c7 	bl	80020e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d122      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0208 	mvn.w	r2, #8
 8001f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f89a 	bl	80020d4 <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f88c 	bl	80020c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f89d 	bl	80020e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d122      	bne.n	8002008 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d11b      	bne.n	8002008 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0210 	mvn.w	r2, #16
 8001fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2208      	movs	r2, #8
 8001fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f870 	bl	80020d4 <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f862 	bl	80020c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f873 	bl	80020e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0201 	mvn.w	r2, #1
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe fc22 	bl	8000878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	2b80      	cmp	r3, #128	; 0x80
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204c:	2b80      	cmp	r3, #128	; 0x80
 800204e:	d107      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f902 	bl	8002264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b40      	cmp	r3, #64	; 0x40
 800206c:	d10e      	bne.n	800208c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002078:	2b40      	cmp	r3, #64	; 0x40
 800207a:	d107      	bne.n	800208c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f838 	bl	80020fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b20      	cmp	r3, #32
 8002098:	d10e      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	d107      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0220 	mvn.w	r2, #32
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f8cc 	bl	8002250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a40      	ldr	r2, [pc, #256]	; (8002224 <TIM_Base_SetConfig+0x114>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d013      	beq.n	8002150 <TIM_Base_SetConfig+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212e:	d00f      	beq.n	8002150 <TIM_Base_SetConfig+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3d      	ldr	r2, [pc, #244]	; (8002228 <TIM_Base_SetConfig+0x118>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00b      	beq.n	8002150 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3c      	ldr	r2, [pc, #240]	; (800222c <TIM_Base_SetConfig+0x11c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d007      	beq.n	8002150 <TIM_Base_SetConfig+0x40>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a3b      	ldr	r2, [pc, #236]	; (8002230 <TIM_Base_SetConfig+0x120>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d003      	beq.n	8002150 <TIM_Base_SetConfig+0x40>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a3a      	ldr	r2, [pc, #232]	; (8002234 <TIM_Base_SetConfig+0x124>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d108      	bne.n	8002162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2f      	ldr	r2, [pc, #188]	; (8002224 <TIM_Base_SetConfig+0x114>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002170:	d027      	beq.n	80021c2 <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <TIM_Base_SetConfig+0x118>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d023      	beq.n	80021c2 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2b      	ldr	r2, [pc, #172]	; (800222c <TIM_Base_SetConfig+0x11c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01f      	beq.n	80021c2 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2a      	ldr	r2, [pc, #168]	; (8002230 <TIM_Base_SetConfig+0x120>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01b      	beq.n	80021c2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a29      	ldr	r2, [pc, #164]	; (8002234 <TIM_Base_SetConfig+0x124>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d017      	beq.n	80021c2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a28      	ldr	r2, [pc, #160]	; (8002238 <TIM_Base_SetConfig+0x128>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a27      	ldr	r2, [pc, #156]	; (800223c <TIM_Base_SetConfig+0x12c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00f      	beq.n	80021c2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a26      	ldr	r2, [pc, #152]	; (8002240 <TIM_Base_SetConfig+0x130>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00b      	beq.n	80021c2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a25      	ldr	r2, [pc, #148]	; (8002244 <TIM_Base_SetConfig+0x134>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d007      	beq.n	80021c2 <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a24      	ldr	r2, [pc, #144]	; (8002248 <TIM_Base_SetConfig+0x138>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d003      	beq.n	80021c2 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a23      	ldr	r2, [pc, #140]	; (800224c <TIM_Base_SetConfig+0x13c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d108      	bne.n	80021d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <TIM_Base_SetConfig+0x114>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d003      	beq.n	8002208 <TIM_Base_SetConfig+0xf8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <TIM_Base_SetConfig+0x124>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d103      	bne.n	8002210 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	615a      	str	r2, [r3, #20]
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40010000 	.word	0x40010000
 8002228:	40000400 	.word	0x40000400
 800222c:	40000800 	.word	0x40000800
 8002230:	40000c00 	.word	0x40000c00
 8002234:	40010400 	.word	0x40010400
 8002238:	40014000 	.word	0x40014000
 800223c:	40014400 	.word	0x40014400
 8002240:	40014800 	.word	0x40014800
 8002244:	40001800 	.word	0x40001800
 8002248:	40001c00 	.word	0x40001c00
 800224c:	40002000 	.word	0x40002000

08002250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e03f      	b.n	800230a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fb2e 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2224      	movs	r2, #36	; 0x24
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f929 	bl	8002514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b08a      	sub	sp, #40	; 0x28
 8002316:	af02      	add	r7, sp, #8
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	d17c      	bne.n	800242c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_UART_Transmit+0x2c>
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e075      	b.n	800242e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_UART_Transmit+0x3e>
 800234c:	2302      	movs	r3, #2
 800234e:	e06e      	b.n	800242e <HAL_UART_Transmit+0x11c>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2221      	movs	r2, #33	; 0x21
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002366:	f7fe fc19 	bl	8000b9c <HAL_GetTick>
 800236a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	88fa      	ldrh	r2, [r7, #6]
 8002370:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002380:	d108      	bne.n	8002394 <HAL_UART_Transmit+0x82>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d104      	bne.n	8002394 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	e003      	b.n	800239c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023a4:	e02a      	b.n	80023fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2200      	movs	r2, #0
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f840 	bl	8002436 <UART_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e036      	b.n	800242e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	3302      	adds	r3, #2
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	e007      	b.n	80023ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	3301      	adds	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1cf      	bne.n	80023a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2200      	movs	r2, #0
 800240e:	2140      	movs	r1, #64	; 0x40
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f810 	bl	8002436 <UART_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e006      	b.n	800242e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	e000      	b.n	800242e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800242c:	2302      	movs	r3, #2
  }
}
 800242e:	4618      	mov	r0, r3
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b090      	sub	sp, #64	; 0x40
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	4613      	mov	r3, r2
 8002444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002446:	e050      	b.n	80024ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244e:	d04c      	beq.n	80024ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <UART_WaitOnFlagUntilTimeout+0x30>
 8002456:	f7fe fba1 	bl	8000b9c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002462:	429a      	cmp	r2, r3
 8002464:	d241      	bcs.n	80024ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	330c      	adds	r3, #12
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	e853 3f00 	ldrex	r3, [r3]
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800247c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	330c      	adds	r3, #12
 8002484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002486:	637a      	str	r2, [r7, #52]	; 0x34
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800248c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800248e:	e841 2300 	strex	r3, r2, [r1]
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1e5      	bne.n	8002466 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3314      	adds	r3, #20
 80024a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	e853 3f00 	ldrex	r3, [r3]
 80024a8:	613b      	str	r3, [r7, #16]
   return(result);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3314      	adds	r3, #20
 80024b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024ba:	623a      	str	r2, [r7, #32]
 80024bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024be:	69f9      	ldr	r1, [r7, #28]
 80024c0:	6a3a      	ldr	r2, [r7, #32]
 80024c2:	e841 2300 	strex	r3, r2, [r1]
 80024c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1e5      	bne.n	800249a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e00f      	b.n	800250a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4013      	ands	r3, r2
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	429a      	cmp	r2, r3
 8002506:	d09f      	beq.n	8002448 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3740      	adds	r7, #64	; 0x40
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002518:	b0c0      	sub	sp, #256	; 0x100
 800251a:	af00      	add	r7, sp, #0
 800251c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002530:	68d9      	ldr	r1, [r3, #12]
 8002532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	ea40 0301 	orr.w	r3, r0, r1
 800253c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800253e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	431a      	orrs	r2, r3
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	431a      	orrs	r2, r3
 8002554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800256c:	f021 010c 	bic.w	r1, r1, #12
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800257a:	430b      	orrs	r3, r1
 800257c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800258a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258e:	6999      	ldr	r1, [r3, #24]
 8002590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	ea40 0301 	orr.w	r3, r0, r1
 800259a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b8f      	ldr	r3, [pc, #572]	; (80027e0 <UART_SetConfig+0x2cc>)
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d005      	beq.n	80025b4 <UART_SetConfig+0xa0>
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b8d      	ldr	r3, [pc, #564]	; (80027e4 <UART_SetConfig+0x2d0>)
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d104      	bne.n	80025be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025b4:	f7fe fe9e 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 80025b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025bc:	e003      	b.n	80025c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025be:	f7fe fe85 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 80025c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d0:	f040 810c 	bne.w	80027ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025d8:	2200      	movs	r2, #0
 80025da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80025e6:	4622      	mov	r2, r4
 80025e8:	462b      	mov	r3, r5
 80025ea:	1891      	adds	r1, r2, r2
 80025ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80025ee:	415b      	adcs	r3, r3
 80025f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025f6:	4621      	mov	r1, r4
 80025f8:	eb12 0801 	adds.w	r8, r2, r1
 80025fc:	4629      	mov	r1, r5
 80025fe:	eb43 0901 	adc.w	r9, r3, r1
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800260e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002616:	4690      	mov	r8, r2
 8002618:	4699      	mov	r9, r3
 800261a:	4623      	mov	r3, r4
 800261c:	eb18 0303 	adds.w	r3, r8, r3
 8002620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002624:	462b      	mov	r3, r5
 8002626:	eb49 0303 	adc.w	r3, r9, r3
 800262a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800262e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800263a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800263e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002642:	460b      	mov	r3, r1
 8002644:	18db      	adds	r3, r3, r3
 8002646:	653b      	str	r3, [r7, #80]	; 0x50
 8002648:	4613      	mov	r3, r2
 800264a:	eb42 0303 	adc.w	r3, r2, r3
 800264e:	657b      	str	r3, [r7, #84]	; 0x54
 8002650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002658:	f7fd fde2 	bl	8000220 <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4b61      	ldr	r3, [pc, #388]	; (80027e8 <UART_SetConfig+0x2d4>)
 8002662:	fba3 2302 	umull	r2, r3, r3, r2
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	011c      	lsls	r4, r3, #4
 800266a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002674:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800267c:	4642      	mov	r2, r8
 800267e:	464b      	mov	r3, r9
 8002680:	1891      	adds	r1, r2, r2
 8002682:	64b9      	str	r1, [r7, #72]	; 0x48
 8002684:	415b      	adcs	r3, r3
 8002686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800268c:	4641      	mov	r1, r8
 800268e:	eb12 0a01 	adds.w	sl, r2, r1
 8002692:	4649      	mov	r1, r9
 8002694:	eb43 0b01 	adc.w	fp, r3, r1
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ac:	4692      	mov	sl, r2
 80026ae:	469b      	mov	fp, r3
 80026b0:	4643      	mov	r3, r8
 80026b2:	eb1a 0303 	adds.w	r3, sl, r3
 80026b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026ba:	464b      	mov	r3, r9
 80026bc:	eb4b 0303 	adc.w	r3, fp, r3
 80026c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026d8:	460b      	mov	r3, r1
 80026da:	18db      	adds	r3, r3, r3
 80026dc:	643b      	str	r3, [r7, #64]	; 0x40
 80026de:	4613      	mov	r3, r2
 80026e0:	eb42 0303 	adc.w	r3, r2, r3
 80026e4:	647b      	str	r3, [r7, #68]	; 0x44
 80026e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026ee:	f7fd fd97 	bl	8000220 <__aeabi_uldivmod>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <UART_SetConfig+0x2d4>)
 80026fa:	fba3 2301 	umull	r2, r3, r3, r1
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2264      	movs	r2, #100	; 0x64
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	1acb      	subs	r3, r1, r3
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <UART_SetConfig+0x2d4>)
 8002710:	fba3 2302 	umull	r2, r3, r3, r2
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800271c:	441c      	add	r4, r3
 800271e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002722:	2200      	movs	r2, #0
 8002724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002728:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800272c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	1891      	adds	r1, r2, r2
 8002736:	63b9      	str	r1, [r7, #56]	; 0x38
 8002738:	415b      	adcs	r3, r3
 800273a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800273c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002740:	4641      	mov	r1, r8
 8002742:	1851      	adds	r1, r2, r1
 8002744:	6339      	str	r1, [r7, #48]	; 0x30
 8002746:	4649      	mov	r1, r9
 8002748:	414b      	adcs	r3, r1
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002758:	4659      	mov	r1, fp
 800275a:	00cb      	lsls	r3, r1, #3
 800275c:	4651      	mov	r1, sl
 800275e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002762:	4651      	mov	r1, sl
 8002764:	00ca      	lsls	r2, r1, #3
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	4603      	mov	r3, r0
 800276c:	4642      	mov	r2, r8
 800276e:	189b      	adds	r3, r3, r2
 8002770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002774:	464b      	mov	r3, r9
 8002776:	460a      	mov	r2, r1
 8002778:	eb42 0303 	adc.w	r3, r2, r3
 800277c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800278c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002794:	460b      	mov	r3, r1
 8002796:	18db      	adds	r3, r3, r3
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
 800279a:	4613      	mov	r3, r2
 800279c:	eb42 0303 	adc.w	r3, r2, r3
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027aa:	f7fd fd39 	bl	8000220 <__aeabi_uldivmod>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <UART_SetConfig+0x2d4>)
 80027b4:	fba3 1302 	umull	r1, r3, r3, r2
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	2164      	movs	r1, #100	; 0x64
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	3332      	adds	r3, #50	; 0x32
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <UART_SetConfig+0x2d4>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	f003 0207 	and.w	r2, r3, #7
 80027d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4422      	add	r2, r4
 80027da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027dc:	e105      	b.n	80029ea <UART_SetConfig+0x4d6>
 80027de:	bf00      	nop
 80027e0:	40011000 	.word	0x40011000
 80027e4:	40011400 	.word	0x40011400
 80027e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80027fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80027fe:	4642      	mov	r2, r8
 8002800:	464b      	mov	r3, r9
 8002802:	1891      	adds	r1, r2, r2
 8002804:	6239      	str	r1, [r7, #32]
 8002806:	415b      	adcs	r3, r3
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
 800280a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800280e:	4641      	mov	r1, r8
 8002810:	1854      	adds	r4, r2, r1
 8002812:	4649      	mov	r1, r9
 8002814:	eb43 0501 	adc.w	r5, r3, r1
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	00eb      	lsls	r3, r5, #3
 8002822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002826:	00e2      	lsls	r2, r4, #3
 8002828:	4614      	mov	r4, r2
 800282a:	461d      	mov	r5, r3
 800282c:	4643      	mov	r3, r8
 800282e:	18e3      	adds	r3, r4, r3
 8002830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002834:	464b      	mov	r3, r9
 8002836:	eb45 0303 	adc.w	r3, r5, r3
 800283a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800283e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800284a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800285a:	4629      	mov	r1, r5
 800285c:	008b      	lsls	r3, r1, #2
 800285e:	4621      	mov	r1, r4
 8002860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002864:	4621      	mov	r1, r4
 8002866:	008a      	lsls	r2, r1, #2
 8002868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800286c:	f7fd fcd8 	bl	8000220 <__aeabi_uldivmod>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4b60      	ldr	r3, [pc, #384]	; (80029f8 <UART_SetConfig+0x4e4>)
 8002876:	fba3 2302 	umull	r2, r3, r3, r2
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	011c      	lsls	r4, r3, #4
 800287e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002882:	2200      	movs	r2, #0
 8002884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002888:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800288c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002890:	4642      	mov	r2, r8
 8002892:	464b      	mov	r3, r9
 8002894:	1891      	adds	r1, r2, r2
 8002896:	61b9      	str	r1, [r7, #24]
 8002898:	415b      	adcs	r3, r3
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a0:	4641      	mov	r1, r8
 80028a2:	1851      	adds	r1, r2, r1
 80028a4:	6139      	str	r1, [r7, #16]
 80028a6:	4649      	mov	r1, r9
 80028a8:	414b      	adcs	r3, r1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028b8:	4659      	mov	r1, fp
 80028ba:	00cb      	lsls	r3, r1, #3
 80028bc:	4651      	mov	r1, sl
 80028be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028c2:	4651      	mov	r1, sl
 80028c4:	00ca      	lsls	r2, r1, #3
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	4603      	mov	r3, r0
 80028cc:	4642      	mov	r2, r8
 80028ce:	189b      	adds	r3, r3, r2
 80028d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028d4:	464b      	mov	r3, r9
 80028d6:	460a      	mov	r2, r1
 80028d8:	eb42 0303 	adc.w	r3, r2, r3
 80028dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80028ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80028f8:	4649      	mov	r1, r9
 80028fa:	008b      	lsls	r3, r1, #2
 80028fc:	4641      	mov	r1, r8
 80028fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002902:	4641      	mov	r1, r8
 8002904:	008a      	lsls	r2, r1, #2
 8002906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800290a:	f7fd fc89 	bl	8000220 <__aeabi_uldivmod>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4b39      	ldr	r3, [pc, #228]	; (80029f8 <UART_SetConfig+0x4e4>)
 8002914:	fba3 1302 	umull	r1, r3, r3, r2
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	2164      	movs	r1, #100	; 0x64
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	3332      	adds	r3, #50	; 0x32
 8002926:	4a34      	ldr	r2, [pc, #208]	; (80029f8 <UART_SetConfig+0x4e4>)
 8002928:	fba2 2303 	umull	r2, r3, r2, r3
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002932:	441c      	add	r4, r3
 8002934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002938:	2200      	movs	r2, #0
 800293a:	673b      	str	r3, [r7, #112]	; 0x70
 800293c:	677a      	str	r2, [r7, #116]	; 0x74
 800293e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002942:	4642      	mov	r2, r8
 8002944:	464b      	mov	r3, r9
 8002946:	1891      	adds	r1, r2, r2
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	415b      	adcs	r3, r3
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002952:	4641      	mov	r1, r8
 8002954:	1851      	adds	r1, r2, r1
 8002956:	6039      	str	r1, [r7, #0]
 8002958:	4649      	mov	r1, r9
 800295a:	414b      	adcs	r3, r1
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800296a:	4659      	mov	r1, fp
 800296c:	00cb      	lsls	r3, r1, #3
 800296e:	4651      	mov	r1, sl
 8002970:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002974:	4651      	mov	r1, sl
 8002976:	00ca      	lsls	r2, r1, #3
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	4603      	mov	r3, r0
 800297e:	4642      	mov	r2, r8
 8002980:	189b      	adds	r3, r3, r2
 8002982:	66bb      	str	r3, [r7, #104]	; 0x68
 8002984:	464b      	mov	r3, r9
 8002986:	460a      	mov	r2, r1
 8002988:	eb42 0303 	adc.w	r3, r2, r3
 800298c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800298e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	663b      	str	r3, [r7, #96]	; 0x60
 8002998:	667a      	str	r2, [r7, #100]	; 0x64
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029a6:	4649      	mov	r1, r9
 80029a8:	008b      	lsls	r3, r1, #2
 80029aa:	4641      	mov	r1, r8
 80029ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029b0:	4641      	mov	r1, r8
 80029b2:	008a      	lsls	r2, r1, #2
 80029b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029b8:	f7fd fc32 	bl	8000220 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <UART_SetConfig+0x4e4>)
 80029c2:	fba3 1302 	umull	r1, r3, r3, r2
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2164      	movs	r1, #100	; 0x64
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	3332      	adds	r3, #50	; 0x32
 80029d4:	4a08      	ldr	r2, [pc, #32]	; (80029f8 <UART_SetConfig+0x4e4>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	f003 020f 	and.w	r2, r3, #15
 80029e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4422      	add	r2, r4
 80029e8:	609a      	str	r2, [r3, #8]
}
 80029ea:	bf00      	nop
 80029ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029f0:	46bd      	mov	sp, r7
 80029f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029f6:	bf00      	nop
 80029f8:	51eb851f 	.word	0x51eb851f

080029fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f103 0208 	add.w	r2, r3, #8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f04f 32ff 	mov.w	r2, #4294967295
 8002a14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f103 0208 	add.w	r2, r3, #8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f103 0208 	add.w	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d103      	bne.n	8002abe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	e00c      	b.n	8002ad8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e002      	b.n	8002acc <vListInsert+0x2e>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d2f6      	bcs.n	8002ac6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	601a      	str	r2, [r3, #0]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6892      	ldr	r2, [r2, #8]
 8002b26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6852      	ldr	r2, [r2, #4]
 8002b30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d103      	bne.n	8002b44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	1e5a      	subs	r2, r3, #1
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b8a:	bf00      	nop
 8002b8c:	e7fe      	b.n	8002b8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b8e:	f001 fd01 	bl	8004594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	441a      	add	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	68f9      	ldr	r1, [r7, #12]
 8002bc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	441a      	add	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	22ff      	movs	r2, #255	; 0xff
 8002bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	22ff      	movs	r2, #255	; 0xff
 8002bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d114      	bne.n	8002c0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01a      	beq.n	8002c22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3310      	adds	r3, #16
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 ffc1 	bl	8003b78 <xTaskRemoveFromEventList>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d012      	beq.n	8002c22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <xQueueGenericReset+0xcc>)
 8002bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	e009      	b.n	8002c22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3310      	adds	r3, #16
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fef2 	bl	80029fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3324      	adds	r3, #36	; 0x24
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff feed 	bl	80029fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c22:	f001 fce7 	bl	80045f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c26:	2301      	movs	r3, #1
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	e000ed04 	.word	0xe000ed04

08002c34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	613b      	str	r3, [r7, #16]
}
 8002c5a:	bf00      	nop
 8002c5c:	e7fe      	b.n	8002c5c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	3348      	adds	r3, #72	; 0x48
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f001 fd73 	bl	8004758 <pvPortMalloc>
 8002c72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d011      	beq.n	8002c9e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	3348      	adds	r3, #72	; 0x48
 8002c82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c8c:	79fa      	ldrb	r2, [r7, #7]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	4613      	mov	r3, r2
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f805 	bl	8002ca8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c9e:	69bb      	ldr	r3, [r7, #24]
	}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3720      	adds	r7, #32
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d103      	bne.n	8002cc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e002      	b.n	8002cca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	69b8      	ldr	r0, [r7, #24]
 8002cda:	f7ff ff43 	bl	8002b64 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00e      	beq.n	8002d12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002d06:	2300      	movs	r3, #0
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f81d 	bl	8002d4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002d24:	2301      	movs	r3, #1
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6939      	ldr	r1, [r7, #16]
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f7ff ff7e 	bl	8002c34 <xQueueGenericCreate>
 8002d38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7ff ffd3 	bl	8002ce6 <prvInitialiseMutex>

		return xNewQueue;
 8002d40:	68fb      	ldr	r3, [r7, #12]
	}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08e      	sub	sp, #56	; 0x38
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <xQueueGenericSend+0x32>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d103      	bne.n	8002d8c <xQueueGenericSend+0x40>
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <xQueueGenericSend+0x44>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <xQueueGenericSend+0x46>
 8002d90:	2300      	movs	r3, #0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <xQueueGenericSend+0x60>
	__asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002da8:	bf00      	nop
 8002daa:	e7fe      	b.n	8002daa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d103      	bne.n	8002dba <xQueueGenericSend+0x6e>
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <xQueueGenericSend+0x72>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <xQueueGenericSend+0x74>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <xQueueGenericSend+0x8e>
	__asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	623b      	str	r3, [r7, #32]
}
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dda:	f001 f889 	bl	8003ef0 <xTaskGetSchedulerState>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <xQueueGenericSend+0x9e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <xQueueGenericSend+0xa2>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <xQueueGenericSend+0xa4>
 8002dee:	2300      	movs	r3, #0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10a      	bne.n	8002e0a <xQueueGenericSend+0xbe>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	61fb      	str	r3, [r7, #28]
}
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e0a:	f001 fbc3 	bl	8004594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d302      	bcc.n	8002e20 <xQueueGenericSend+0xd4>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d129      	bne.n	8002e74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e26:	f000 f9b3 	bl	8003190 <prvCopyDataToQueue>
 8002e2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	3324      	adds	r3, #36	; 0x24
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fe9d 	bl	8003b78 <xTaskRemoveFromEventList>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d013      	beq.n	8002e6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e44:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <xQueueGenericSend+0x1f8>)
 8002e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	e00a      	b.n	8002e6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e5c:	4b39      	ldr	r3, [pc, #228]	; (8002f44 <xQueueGenericSend+0x1f8>)
 8002e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e6c:	f001 fbc2 	bl	80045f4 <vPortExitCritical>
				return pdPASS;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e063      	b.n	8002f3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d103      	bne.n	8002e82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e7a:	f001 fbbb 	bl	80045f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e05c      	b.n	8002f3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fed5 	bl	8003c3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e92:	2301      	movs	r3, #1
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e96:	f001 fbad 	bl	80045f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e9a:	f000 fc8b 	bl	80037b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e9e:	f001 fb79 	bl	8004594 <vPortEnterCritical>
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ea8:	b25b      	sxtb	r3, r3
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d103      	bne.n	8002eb8 <xQueueGenericSend+0x16c>
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ebe:	b25b      	sxtb	r3, r3
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d103      	bne.n	8002ece <xQueueGenericSend+0x182>
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ece:	f001 fb91 	bl	80045f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ed2:	1d3a      	adds	r2, r7, #4
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fec4 	bl	8003c68 <xTaskCheckForTimeOut>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d124      	bne.n	8002f30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ee8:	f000 fa24 	bl	8003334 <prvIsQueueFull>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d018      	beq.n	8002f24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	3310      	adds	r3, #16
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fe18 	bl	8003b30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f02:	f000 f9af 	bl	8003264 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f06:	f000 fc63 	bl	80037d0 <xTaskResumeAll>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f47f af7c 	bne.w	8002e0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <xQueueGenericSend+0x1f8>)
 8002f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	e772      	b.n	8002e0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f26:	f000 f99d 	bl	8003264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f2a:	f000 fc51 	bl	80037d0 <xTaskResumeAll>
 8002f2e:	e76c      	b.n	8002e0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f32:	f000 f997 	bl	8003264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f36:	f000 fc4b 	bl	80037d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3738      	adds	r7, #56	; 0x38
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	e000ed04 	.word	0xe000ed04

08002f48 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08e      	sub	sp, #56	; 0x38
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	623b      	str	r3, [r7, #32]
}
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	61fb      	str	r3, [r7, #28]
}
 8002f94:	bf00      	nop
 8002f96:	e7fe      	b.n	8002f96 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f98:	f000 ffaa 	bl	8003ef0 <xTaskGetSchedulerState>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <xQueueSemaphoreTake+0x60>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <xQueueSemaphoreTake+0x64>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <xQueueSemaphoreTake+0x66>
 8002fac:	2300      	movs	r3, #0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	61bb      	str	r3, [r7, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fc8:	f001 fae4 	bl	8004594 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d024      	beq.n	8003022 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	1e5a      	subs	r2, r3, #1
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d104      	bne.n	8002ff2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002fe8:	f001 f92a 	bl	8004240 <pvTaskIncrementMutexHeldCount>
 8002fec:	4602      	mov	r2, r0
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00f      	beq.n	800301a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	3310      	adds	r3, #16
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fdba 	bl	8003b78 <xTaskRemoveFromEventList>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800300a:	4b54      	ldr	r3, [pc, #336]	; (800315c <xQueueSemaphoreTake+0x214>)
 800300c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800301a:	f001 faeb 	bl	80045f4 <vPortExitCritical>
				return pdPASS;
 800301e:	2301      	movs	r3, #1
 8003020:	e097      	b.n	8003152 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d111      	bne.n	800304c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	617b      	str	r3, [r7, #20]
}
 8003040:	bf00      	nop
 8003042:	e7fe      	b.n	8003042 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003044:	f001 fad6 	bl	80045f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003048:	2300      	movs	r3, #0
 800304a:	e082      	b.n	8003152 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003052:	f107 030c 	add.w	r3, r7, #12
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fdf0 	bl	8003c3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800305c:	2301      	movs	r3, #1
 800305e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003060:	f001 fac8 	bl	80045f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003064:	f000 fba6 	bl	80037b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003068:	f001 fa94 	bl	8004594 <vPortEnterCritical>
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003072:	b25b      	sxtb	r3, r3
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d103      	bne.n	8003082 <xQueueSemaphoreTake+0x13a>
 800307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003088:	b25b      	sxtb	r3, r3
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d103      	bne.n	8003098 <xQueueSemaphoreTake+0x150>
 8003090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003098:	f001 faac 	bl	80045f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800309c:	463a      	mov	r2, r7
 800309e:	f107 030c 	add.w	r3, r7, #12
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fddf 	bl	8003c68 <xTaskCheckForTimeOut>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d132      	bne.n	8003116 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030b2:	f000 f929 	bl	8003308 <prvIsQueueEmpty>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d026      	beq.n	800310a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80030c4:	f001 fa66 	bl	8004594 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 ff2d 	bl	8003f2c <xTaskPriorityInherit>
 80030d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80030d4:	f001 fa8e 	bl	80045f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030da:	3324      	adds	r3, #36	; 0x24
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fd25 	bl	8003b30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030e8:	f000 f8bc 	bl	8003264 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030ec:	f000 fb70 	bl	80037d0 <xTaskResumeAll>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f47f af68 	bne.w	8002fc8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80030f8:	4b18      	ldr	r3, [pc, #96]	; (800315c <xQueueSemaphoreTake+0x214>)
 80030fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	e75e      	b.n	8002fc8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800310a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800310c:	f000 f8aa 	bl	8003264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003110:	f000 fb5e 	bl	80037d0 <xTaskResumeAll>
 8003114:	e758      	b.n	8002fc8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003116:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003118:	f000 f8a4 	bl	8003264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800311c:	f000 fb58 	bl	80037d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003122:	f000 f8f1 	bl	8003308 <prvIsQueueEmpty>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	f43f af4d 	beq.w	8002fc8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00d      	beq.n	8003150 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003134:	f001 fa2e 	bl	8004594 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800313a:	f000 f811 	bl	8003160 <prvGetDisinheritPriorityAfterTimeout>
 800313e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003146:	4618      	mov	r0, r3
 8003148:	f000 ffec 	bl	8004124 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800314c:	f001 fa52 	bl	80045f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003150:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003152:	4618      	mov	r0, r3
 8003154:	3738      	adds	r7, #56	; 0x38
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	e000ed04 	.word	0xe000ed04

08003160 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f1c3 0307 	rsb	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e001      	b.n	8003182 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003182:	68fb      	ldr	r3, [r7, #12]
	}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10d      	bne.n	80031ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d14d      	bne.n	8003252 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 ff2c 	bl	8004018 <xTaskPriorityDisinherit>
 80031c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	e043      	b.n	8003252 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d119      	bne.n	8003204 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6858      	ldr	r0, [r3, #4]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	461a      	mov	r2, r3
 80031da:	68b9      	ldr	r1, [r7, #8]
 80031dc:	f001 fcca 	bl	8004b74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	441a      	add	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d32b      	bcc.n	8003252 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	e026      	b.n	8003252 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	68d8      	ldr	r0, [r3, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	461a      	mov	r2, r3
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	f001 fcb0 	bl	8004b74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	425b      	negs	r3, r3
 800321e:	441a      	add	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d207      	bcs.n	8003240 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	425b      	negs	r3, r3
 800323a:	441a      	add	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d105      	bne.n	8003252 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	3b01      	subs	r3, #1
 8003250:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800325a:	697b      	ldr	r3, [r7, #20]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800326c:	f001 f992 	bl	8004594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003276:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003278:	e011      	b.n	800329e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2b00      	cmp	r3, #0
 8003280:	d012      	beq.n	80032a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3324      	adds	r3, #36	; 0x24
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fc76 	bl	8003b78 <xTaskRemoveFromEventList>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003292:	f000 fd4b 	bl	8003d2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	3b01      	subs	r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	dce9      	bgt.n	800327a <prvUnlockQueue+0x16>
 80032a6:	e000      	b.n	80032aa <prvUnlockQueue+0x46>
					break;
 80032a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	22ff      	movs	r2, #255	; 0xff
 80032ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80032b2:	f001 f99f 	bl	80045f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032b6:	f001 f96d 	bl	8004594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032c2:	e011      	b.n	80032e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d012      	beq.n	80032f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3310      	adds	r3, #16
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fc51 	bl	8003b78 <xTaskRemoveFromEventList>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032dc:	f000 fd26 	bl	8003d2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032e0:	7bbb      	ldrb	r3, [r7, #14]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	dce9      	bgt.n	80032c4 <prvUnlockQueue+0x60>
 80032f0:	e000      	b.n	80032f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	22ff      	movs	r2, #255	; 0xff
 80032f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032fc:	f001 f97a 	bl	80045f4 <vPortExitCritical>
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003310:	f001 f940 	bl	8004594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800331c:	2301      	movs	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e001      	b.n	8003326 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003326:	f001 f965 	bl	80045f4 <vPortExitCritical>

	return xReturn;
 800332a:	68fb      	ldr	r3, [r7, #12]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800333c:	f001 f92a 	bl	8004594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003348:	429a      	cmp	r2, r3
 800334a:	d102      	bne.n	8003352 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800334c:	2301      	movs	r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e001      	b.n	8003356 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003356:	f001 f94d 	bl	80045f4 <vPortExitCritical>

	return xReturn;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08e      	sub	sp, #56	; 0x38
 8003368:	af04      	add	r7, sp, #16
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	623b      	str	r3, [r7, #32]
}
 800338a:	bf00      	nop
 800338c:	e7fe      	b.n	800338c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <xTaskCreateStatic+0x46>
	__asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	61fb      	str	r3, [r7, #28]
}
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033aa:	2354      	movs	r3, #84	; 0x54
 80033ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b54      	cmp	r3, #84	; 0x54
 80033b2:	d00a      	beq.n	80033ca <xTaskCreateStatic+0x66>
	__asm volatile
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	61bb      	str	r3, [r7, #24]
}
 80033c6:	bf00      	nop
 80033c8:	e7fe      	b.n	80033c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01e      	beq.n	8003410 <xTaskCreateStatic+0xac>
 80033d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01b      	beq.n	8003410 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033ea:	2300      	movs	r3, #0
 80033ec:	9303      	str	r3, [sp, #12]
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	9302      	str	r3, [sp, #8]
 80033f2:	f107 0314 	add.w	r3, r7, #20
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f850 	bl	80034a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800340a:	f000 f8d5 	bl	80035b8 <prvAddNewTaskToReadyList>
 800340e:	e001      	b.n	8003414 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003414:	697b      	ldr	r3, [r7, #20]
	}
 8003416:	4618      	mov	r0, r3
 8003418:	3728      	adds	r7, #40	; 0x28
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800341e:	b580      	push	{r7, lr}
 8003420:	b08c      	sub	sp, #48	; 0x30
 8003422:	af04      	add	r7, sp, #16
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4618      	mov	r0, r3
 8003434:	f001 f990 	bl	8004758 <pvPortMalloc>
 8003438:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00e      	beq.n	800345e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003440:	2054      	movs	r0, #84	; 0x54
 8003442:	f001 f989 	bl	8004758 <pvPortMalloc>
 8003446:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
 8003454:	e005      	b.n	8003462 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003456:	6978      	ldr	r0, [r7, #20]
 8003458:	f001 fa4a 	bl	80048f0 <vPortFree>
 800345c:	e001      	b.n	8003462 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d017      	beq.n	8003498 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003470:	88fa      	ldrh	r2, [r7, #6]
 8003472:	2300      	movs	r3, #0
 8003474:	9303      	str	r3, [sp, #12]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	9302      	str	r3, [sp, #8]
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f80e 	bl	80034a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800348c:	69f8      	ldr	r0, [r7, #28]
 800348e:	f000 f893 	bl	80035b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003492:	2301      	movs	r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	e002      	b.n	800349e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003498:	f04f 33ff 	mov.w	r3, #4294967295
 800349c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800349e:	69bb      	ldr	r3, [r7, #24]
	}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034c0:	3b01      	subs	r3, #1
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f023 0307 	bic.w	r3, r3, #7
 80034ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	617b      	str	r3, [r7, #20]
}
 80034ec:	bf00      	nop
 80034ee:	e7fe      	b.n	80034ee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d01f      	beq.n	8003536 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	e012      	b.n	8003522 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	7819      	ldrb	r1, [r3, #0]
 8003504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	3334      	adds	r3, #52	; 0x34
 800350c:	460a      	mov	r2, r1
 800350e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d006      	beq.n	800352a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	3301      	adds	r3, #1
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	2b0f      	cmp	r3, #15
 8003526:	d9e9      	bls.n	80034fc <prvInitialiseNewTask+0x54>
 8003528:	e000      	b.n	800352c <prvInitialiseNewTask+0x84>
			{
				break;
 800352a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003534:	e003      	b.n	800353e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	2b06      	cmp	r3, #6
 8003542:	d901      	bls.n	8003548 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003544:	2306      	movs	r3, #6
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800354c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	2200      	movs	r2, #0
 8003558:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	3304      	adds	r3, #4
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fa6c 	bl	8002a3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	3318      	adds	r3, #24
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fa67 	bl	8002a3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003572:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	f1c3 0207 	rsb	r2, r3, #7
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003582:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	2200      	movs	r2, #0
 8003588:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	68f9      	ldr	r1, [r7, #12]
 8003596:	69b8      	ldr	r0, [r7, #24]
 8003598:	f000 fecc 	bl	8004334 <pxPortInitialiseStack>
 800359c:	4602      	mov	r2, r0
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035ae:	bf00      	nop
 80035b0:	3720      	adds	r7, #32
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035c0:	f000 ffe8 	bl	8004594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035c4:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <prvAddNewTaskToReadyList+0xb8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	4a29      	ldr	r2, [pc, #164]	; (8003670 <prvAddNewTaskToReadyList+0xb8>)
 80035cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035ce:	4b29      	ldr	r3, [pc, #164]	; (8003674 <prvAddNewTaskToReadyList+0xbc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035d6:	4a27      	ldr	r2, [pc, #156]	; (8003674 <prvAddNewTaskToReadyList+0xbc>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035dc:	4b24      	ldr	r3, [pc, #144]	; (8003670 <prvAddNewTaskToReadyList+0xb8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d110      	bne.n	8003606 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035e4:	f000 fbc6 	bl	8003d74 <prvInitialiseTaskLists>
 80035e8:	e00d      	b.n	8003606 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035ea:	4b23      	ldr	r3, [pc, #140]	; (8003678 <prvAddNewTaskToReadyList+0xc0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035f2:	4b20      	ldr	r3, [pc, #128]	; (8003674 <prvAddNewTaskToReadyList+0xbc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d802      	bhi.n	8003606 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003600:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <prvAddNewTaskToReadyList+0xbc>)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003606:	4b1d      	ldr	r3, [pc, #116]	; (800367c <prvAddNewTaskToReadyList+0xc4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3301      	adds	r3, #1
 800360c:	4a1b      	ldr	r2, [pc, #108]	; (800367c <prvAddNewTaskToReadyList+0xc4>)
 800360e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	2201      	movs	r2, #1
 8003616:	409a      	lsls	r2, r3
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <prvAddNewTaskToReadyList+0xc8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4313      	orrs	r3, r2
 800361e:	4a18      	ldr	r2, [pc, #96]	; (8003680 <prvAddNewTaskToReadyList+0xc8>)
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4a15      	ldr	r2, [pc, #84]	; (8003684 <prvAddNewTaskToReadyList+0xcc>)
 8003630:	441a      	add	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3304      	adds	r3, #4
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f7ff fa0c 	bl	8002a56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800363e:	f000 ffd9 	bl	80045f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <prvAddNewTaskToReadyList+0xc0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00e      	beq.n	8003668 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <prvAddNewTaskToReadyList+0xbc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	429a      	cmp	r2, r3
 8003656:	d207      	bcs.n	8003668 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <prvAddNewTaskToReadyList+0xd0>)
 800365a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	2000041c 	.word	0x2000041c
 8003674:	2000031c 	.word	0x2000031c
 8003678:	20000428 	.word	0x20000428
 800367c:	20000438 	.word	0x20000438
 8003680:	20000424 	.word	0x20000424
 8003684:	20000320 	.word	0x20000320
 8003688:	e000ed04 	.word	0xe000ed04

0800368c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d017      	beq.n	80036ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800369e:	4b13      	ldr	r3, [pc, #76]	; (80036ec <vTaskDelay+0x60>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <vTaskDelay+0x30>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	60bb      	str	r3, [r7, #8]
}
 80036b8:	bf00      	nop
 80036ba:	e7fe      	b.n	80036ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036bc:	f000 f87a 	bl	80037b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036c0:	2100      	movs	r1, #0
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fdd0 	bl	8004268 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036c8:	f000 f882 	bl	80037d0 <xTaskResumeAll>
 80036cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d107      	bne.n	80036e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <vTaskDelay+0x64>)
 80036d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000444 	.word	0x20000444
 80036f0:	e000ed04 	.word	0xe000ed04

080036f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	; 0x28
 80036f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003702:	463a      	mov	r2, r7
 8003704:	1d39      	adds	r1, r7, #4
 8003706:	f107 0308 	add.w	r3, r7, #8
 800370a:	4618      	mov	r0, r3
 800370c:	f7fc ff0a 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003710:	6839      	ldr	r1, [r7, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	9202      	str	r2, [sp, #8]
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	2300      	movs	r3, #0
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2300      	movs	r3, #0
 8003720:	460a      	mov	r2, r1
 8003722:	491e      	ldr	r1, [pc, #120]	; (800379c <vTaskStartScheduler+0xa8>)
 8003724:	481e      	ldr	r0, [pc, #120]	; (80037a0 <vTaskStartScheduler+0xac>)
 8003726:	f7ff fe1d 	bl	8003364 <xTaskCreateStatic>
 800372a:	4603      	mov	r3, r0
 800372c:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <vTaskStartScheduler+0xb0>)
 800372e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003730:	4b1c      	ldr	r3, [pc, #112]	; (80037a4 <vTaskStartScheduler+0xb0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003738:	2301      	movs	r3, #1
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	e001      	b.n	8003742 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d116      	bne.n	8003776 <vTaskStartScheduler+0x82>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	613b      	str	r3, [r7, #16]
}
 800375a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <vTaskStartScheduler+0xb4>)
 800375e:	f04f 32ff 	mov.w	r2, #4294967295
 8003762:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <vTaskStartScheduler+0xb8>)
 8003766:	2201      	movs	r2, #1
 8003768:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <vTaskStartScheduler+0xbc>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003770:	f000 fe6e 	bl	8004450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003774:	e00e      	b.n	8003794 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d10a      	bne.n	8003794 <vTaskStartScheduler+0xa0>
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	60fb      	str	r3, [r7, #12]
}
 8003790:	bf00      	nop
 8003792:	e7fe      	b.n	8003792 <vTaskStartScheduler+0x9e>
}
 8003794:	bf00      	nop
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	08004c58 	.word	0x08004c58
 80037a0:	08003d45 	.word	0x08003d45
 80037a4:	20000440 	.word	0x20000440
 80037a8:	2000043c 	.word	0x2000043c
 80037ac:	20000428 	.word	0x20000428
 80037b0:	20000420 	.word	0x20000420

080037b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <vTaskSuspendAll+0x18>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	4a03      	ldr	r2, [pc, #12]	; (80037cc <vTaskSuspendAll+0x18>)
 80037c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037c2:	bf00      	nop
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	20000444 	.word	0x20000444

080037d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037de:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <xTaskResumeAll+0x114>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10a      	bne.n	80037fc <xTaskResumeAll+0x2c>
	__asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	603b      	str	r3, [r7, #0]
}
 80037f8:	bf00      	nop
 80037fa:	e7fe      	b.n	80037fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037fc:	f000 feca 	bl	8004594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003800:	4b38      	ldr	r3, [pc, #224]	; (80038e4 <xTaskResumeAll+0x114>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3b01      	subs	r3, #1
 8003806:	4a37      	ldr	r2, [pc, #220]	; (80038e4 <xTaskResumeAll+0x114>)
 8003808:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800380a:	4b36      	ldr	r3, [pc, #216]	; (80038e4 <xTaskResumeAll+0x114>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d161      	bne.n	80038d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003812:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <xTaskResumeAll+0x118>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d05d      	beq.n	80038d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800381a:	e02e      	b.n	800387a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800381c:	4b33      	ldr	r3, [pc, #204]	; (80038ec <xTaskResumeAll+0x11c>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3318      	adds	r3, #24
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff f971 	bl	8002b10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3304      	adds	r3, #4
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff f96c 	bl	8002b10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	2201      	movs	r2, #1
 800383e:	409a      	lsls	r2, r3
 8003840:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <xTaskResumeAll+0x120>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4313      	orrs	r3, r2
 8003846:	4a2a      	ldr	r2, [pc, #168]	; (80038f0 <xTaskResumeAll+0x120>)
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4a27      	ldr	r2, [pc, #156]	; (80038f4 <xTaskResumeAll+0x124>)
 8003858:	441a      	add	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3304      	adds	r3, #4
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7ff f8f8 	bl	8002a56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386a:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <xTaskResumeAll+0x128>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	429a      	cmp	r2, r3
 8003872:	d302      	bcc.n	800387a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003874:	4b21      	ldr	r3, [pc, #132]	; (80038fc <xTaskResumeAll+0x12c>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800387a:	4b1c      	ldr	r3, [pc, #112]	; (80038ec <xTaskResumeAll+0x11c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1cc      	bne.n	800381c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003888:	f000 fb12 	bl	8003eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800388c:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <xTaskResumeAll+0x130>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003898:	f000 f836 	bl	8003908 <xTaskIncrementTick>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80038a2:	4b16      	ldr	r3, [pc, #88]	; (80038fc <xTaskResumeAll+0x12c>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f1      	bne.n	8003898 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80038b4:	4b12      	ldr	r3, [pc, #72]	; (8003900 <xTaskResumeAll+0x130>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <xTaskResumeAll+0x12c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <xTaskResumeAll+0x134>)
 80038c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038d6:	f000 fe8d 	bl	80045f4 <vPortExitCritical>

	return xAlreadyYielded;
 80038da:	68bb      	ldr	r3, [r7, #8]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000444 	.word	0x20000444
 80038e8:	2000041c 	.word	0x2000041c
 80038ec:	200003dc 	.word	0x200003dc
 80038f0:	20000424 	.word	0x20000424
 80038f4:	20000320 	.word	0x20000320
 80038f8:	2000031c 	.word	0x2000031c
 80038fc:	20000430 	.word	0x20000430
 8003900:	2000042c 	.word	0x2000042c
 8003904:	e000ed04 	.word	0xe000ed04

08003908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003912:	4b4e      	ldr	r3, [pc, #312]	; (8003a4c <xTaskIncrementTick+0x144>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 808e 	bne.w	8003a38 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800391c:	4b4c      	ldr	r3, [pc, #304]	; (8003a50 <xTaskIncrementTick+0x148>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003924:	4a4a      	ldr	r2, [pc, #296]	; (8003a50 <xTaskIncrementTick+0x148>)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d120      	bne.n	8003972 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003930:	4b48      	ldr	r3, [pc, #288]	; (8003a54 <xTaskIncrementTick+0x14c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <xTaskIncrementTick+0x48>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	603b      	str	r3, [r7, #0]
}
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <xTaskIncrementTick+0x46>
 8003950:	4b40      	ldr	r3, [pc, #256]	; (8003a54 <xTaskIncrementTick+0x14c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b40      	ldr	r3, [pc, #256]	; (8003a58 <xTaskIncrementTick+0x150>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a3e      	ldr	r2, [pc, #248]	; (8003a54 <xTaskIncrementTick+0x14c>)
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4a3e      	ldr	r2, [pc, #248]	; (8003a58 <xTaskIncrementTick+0x150>)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b3d      	ldr	r3, [pc, #244]	; (8003a5c <xTaskIncrementTick+0x154>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	4a3c      	ldr	r2, [pc, #240]	; (8003a5c <xTaskIncrementTick+0x154>)
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	f000 fa9f 	bl	8003eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <xTaskIncrementTick+0x158>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	429a      	cmp	r2, r3
 800397a:	d348      	bcc.n	8003a0e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800397c:	4b35      	ldr	r3, [pc, #212]	; (8003a54 <xTaskIncrementTick+0x14c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003986:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <xTaskIncrementTick+0x158>)
 8003988:	f04f 32ff 	mov.w	r2, #4294967295
 800398c:	601a      	str	r2, [r3, #0]
					break;
 800398e:	e03e      	b.n	8003a0e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003990:	4b30      	ldr	r3, [pc, #192]	; (8003a54 <xTaskIncrementTick+0x14c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d203      	bcs.n	80039b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039a8:	4a2d      	ldr	r2, [pc, #180]	; (8003a60 <xTaskIncrementTick+0x158>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039ae:	e02e      	b.n	8003a0e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	3304      	adds	r3, #4
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff f8ab 	bl	8002b10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3318      	adds	r3, #24
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff f8a2 	bl	8002b10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	2201      	movs	r2, #1
 80039d2:	409a      	lsls	r2, r3
 80039d4:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <xTaskIncrementTick+0x15c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4313      	orrs	r3, r2
 80039da:	4a22      	ldr	r2, [pc, #136]	; (8003a64 <xTaskIncrementTick+0x15c>)
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <xTaskIncrementTick+0x160>)
 80039ec:	441a      	add	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	3304      	adds	r3, #4
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f7ff f82e 	bl	8002a56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fe:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <xTaskIncrementTick+0x164>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d3b9      	bcc.n	800397c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a0c:	e7b6      	b.n	800397c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <xTaskIncrementTick+0x164>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a14:	4914      	ldr	r1, [pc, #80]	; (8003a68 <xTaskIncrementTick+0x160>)
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d901      	bls.n	8003a2a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003a26:	2301      	movs	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <xTaskIncrementTick+0x168>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d007      	beq.n	8003a42 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003a32:	2301      	movs	r3, #1
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	e004      	b.n	8003a42 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a38:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <xTaskIncrementTick+0x16c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	4a0d      	ldr	r2, [pc, #52]	; (8003a74 <xTaskIncrementTick+0x16c>)
 8003a40:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a42:	697b      	ldr	r3, [r7, #20]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20000444 	.word	0x20000444
 8003a50:	20000420 	.word	0x20000420
 8003a54:	200003d4 	.word	0x200003d4
 8003a58:	200003d8 	.word	0x200003d8
 8003a5c:	20000434 	.word	0x20000434
 8003a60:	2000043c 	.word	0x2000043c
 8003a64:	20000424 	.word	0x20000424
 8003a68:	20000320 	.word	0x20000320
 8003a6c:	2000031c 	.word	0x2000031c
 8003a70:	20000430 	.word	0x20000430
 8003a74:	2000042c 	.word	0x2000042c

08003a78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a7e:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <vTaskSwitchContext+0xa4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <vTaskSwitchContext+0xa8>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a8c:	e03f      	b.n	8003b0e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003a8e:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <vTaskSwitchContext+0xa8>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a94:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <vTaskSwitchContext+0xac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003aa2:	7afb      	ldrb	r3, [r7, #11]
 8003aa4:	f1c3 031f 	rsb	r3, r3, #31
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	491f      	ldr	r1, [pc, #124]	; (8003b28 <vTaskSwitchContext+0xb0>)
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	607b      	str	r3, [r7, #4]
}
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <vTaskSwitchContext+0x5a>
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <vTaskSwitchContext+0xb0>)
 8003ae0:	4413      	add	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	3308      	adds	r3, #8
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d104      	bne.n	8003b04 <vTaskSwitchContext+0x8c>
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	605a      	str	r2, [r3, #4]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	4a08      	ldr	r2, [pc, #32]	; (8003b2c <vTaskSwitchContext+0xb4>)
 8003b0c:	6013      	str	r3, [r2, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000444 	.word	0x20000444
 8003b20:	20000430 	.word	0x20000430
 8003b24:	20000424 	.word	0x20000424
 8003b28:	20000320 	.word	0x20000320
 8003b2c:	2000031c 	.word	0x2000031c

08003b30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	60fb      	str	r3, [r7, #12]
}
 8003b52:	bf00      	nop
 8003b54:	e7fe      	b.n	8003b54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b56:	4b07      	ldr	r3, [pc, #28]	; (8003b74 <vTaskPlaceOnEventList+0x44>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3318      	adds	r3, #24
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fe ff9d 	bl	8002a9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b64:	2101      	movs	r1, #1
 8003b66:	6838      	ldr	r0, [r7, #0]
 8003b68:	f000 fb7e 	bl	8004268 <prvAddCurrentTaskToDelayedList>
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	2000031c 	.word	0x2000031c

08003b78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	60fb      	str	r3, [r7, #12]
}
 8003ba0:	bf00      	nop
 8003ba2:	e7fe      	b.n	8003ba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	3318      	adds	r3, #24
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe ffb1 	bl	8002b10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bae:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <xTaskRemoveFromEventList+0xac>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d11c      	bne.n	8003bf0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe ffa8 	bl	8002b10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <xTaskRemoveFromEventList+0xb0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	4a16      	ldr	r2, [pc, #88]	; (8003c28 <xTaskRemoveFromEventList+0xb0>)
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <xTaskRemoveFromEventList+0xb4>)
 8003be0:	441a      	add	r2, r3
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	3304      	adds	r3, #4
 8003be6:	4619      	mov	r1, r3
 8003be8:	4610      	mov	r0, r2
 8003bea:	f7fe ff34 	bl	8002a56 <vListInsertEnd>
 8003bee:	e005      	b.n	8003bfc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	3318      	adds	r3, #24
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	480e      	ldr	r0, [pc, #56]	; (8003c30 <xTaskRemoveFromEventList+0xb8>)
 8003bf8:	f7fe ff2d 	bl	8002a56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <xTaskRemoveFromEventList+0xbc>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d905      	bls.n	8003c16 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <xTaskRemoveFromEventList+0xc0>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	e001      	b.n	8003c1a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c1a:	697b      	ldr	r3, [r7, #20]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000444 	.word	0x20000444
 8003c28:	20000424 	.word	0x20000424
 8003c2c:	20000320 	.word	0x20000320
 8003c30:	200003dc 	.word	0x200003dc
 8003c34:	2000031c 	.word	0x2000031c
 8003c38:	20000430 	.word	0x20000430

08003c3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c44:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <vTaskInternalSetTimeOutState+0x24>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <vTaskInternalSetTimeOutState+0x28>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	605a      	str	r2, [r3, #4]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	20000434 	.word	0x20000434
 8003c64:	20000420 	.word	0x20000420

08003c68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10a      	bne.n	8003c8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	613b      	str	r3, [r7, #16]
}
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	60fb      	str	r3, [r7, #12]
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003caa:	f000 fc73 	bl	8004594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cae:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <xTaskCheckForTimeOut+0xbc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc6:	d102      	bne.n	8003cce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	e023      	b.n	8003d16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <xTaskCheckForTimeOut+0xc0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d007      	beq.n	8003cea <xTaskCheckForTimeOut+0x82>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	e015      	b.n	8003d16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d20b      	bcs.n	8003d0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	1ad2      	subs	r2, r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff9b 	bl	8003c3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	e004      	b.n	8003d16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d12:	2301      	movs	r3, #1
 8003d14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d16:	f000 fc6d 	bl	80045f4 <vPortExitCritical>

	return xReturn;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3720      	adds	r7, #32
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000420 	.word	0x20000420
 8003d28:	20000434 	.word	0x20000434

08003d2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <vTaskMissedYield+0x14>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	20000430 	.word	0x20000430

08003d44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d4c:	f000 f852 	bl	8003df4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <prvIdleTask+0x28>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d9f9      	bls.n	8003d4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <prvIdleTask+0x2c>)
 8003d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d68:	e7f0      	b.n	8003d4c <prvIdleTask+0x8>
 8003d6a:	bf00      	nop
 8003d6c:	20000320 	.word	0x20000320
 8003d70:	e000ed04 	.word	0xe000ed04

08003d74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	e00c      	b.n	8003d9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4a12      	ldr	r2, [pc, #72]	; (8003dd4 <prvInitialiseTaskLists+0x60>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fe34 	bl	80029fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3301      	adds	r3, #1
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b06      	cmp	r3, #6
 8003d9e:	d9ef      	bls.n	8003d80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003da0:	480d      	ldr	r0, [pc, #52]	; (8003dd8 <prvInitialiseTaskLists+0x64>)
 8003da2:	f7fe fe2b 	bl	80029fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003da6:	480d      	ldr	r0, [pc, #52]	; (8003ddc <prvInitialiseTaskLists+0x68>)
 8003da8:	f7fe fe28 	bl	80029fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dac:	480c      	ldr	r0, [pc, #48]	; (8003de0 <prvInitialiseTaskLists+0x6c>)
 8003dae:	f7fe fe25 	bl	80029fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003db2:	480c      	ldr	r0, [pc, #48]	; (8003de4 <prvInitialiseTaskLists+0x70>)
 8003db4:	f7fe fe22 	bl	80029fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003db8:	480b      	ldr	r0, [pc, #44]	; (8003de8 <prvInitialiseTaskLists+0x74>)
 8003dba:	f7fe fe1f 	bl	80029fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <prvInitialiseTaskLists+0x78>)
 8003dc0:	4a05      	ldr	r2, [pc, #20]	; (8003dd8 <prvInitialiseTaskLists+0x64>)
 8003dc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <prvInitialiseTaskLists+0x7c>)
 8003dc6:	4a05      	ldr	r2, [pc, #20]	; (8003ddc <prvInitialiseTaskLists+0x68>)
 8003dc8:	601a      	str	r2, [r3, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000320 	.word	0x20000320
 8003dd8:	200003ac 	.word	0x200003ac
 8003ddc:	200003c0 	.word	0x200003c0
 8003de0:	200003dc 	.word	0x200003dc
 8003de4:	200003f0 	.word	0x200003f0
 8003de8:	20000408 	.word	0x20000408
 8003dec:	200003d4 	.word	0x200003d4
 8003df0:	200003d8 	.word	0x200003d8

08003df4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dfa:	e019      	b.n	8003e30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003dfc:	f000 fbca 	bl	8004594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <prvCheckTasksWaitingTermination+0x50>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe fe7f 	bl	8002b10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e12:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <prvCheckTasksWaitingTermination+0x54>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	4a0b      	ldr	r2, [pc, #44]	; (8003e48 <prvCheckTasksWaitingTermination+0x54>)
 8003e1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <prvCheckTasksWaitingTermination+0x58>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <prvCheckTasksWaitingTermination+0x58>)
 8003e24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e26:	f000 fbe5 	bl	80045f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f810 	bl	8003e50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <prvCheckTasksWaitingTermination+0x58>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e1      	bne.n	8003dfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	200003f0 	.word	0x200003f0
 8003e48:	2000041c 	.word	0x2000041c
 8003e4c:	20000404 	.word	0x20000404

08003e50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d108      	bne.n	8003e74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fd42 	bl	80048f0 <vPortFree>
				vPortFree( pxTCB );
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fd3f 	bl	80048f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e72:	e018      	b.n	8003ea6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d103      	bne.n	8003e86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fd36 	bl	80048f0 <vPortFree>
	}
 8003e84:	e00f      	b.n	8003ea6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d00a      	beq.n	8003ea6 <prvDeleteTCB+0x56>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	60fb      	str	r3, [r7, #12]
}
 8003ea2:	bf00      	nop
 8003ea4:	e7fe      	b.n	8003ea4 <prvDeleteTCB+0x54>
	}
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <prvResetNextTaskUnblockTime+0x38>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d104      	bne.n	8003eca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <prvResetNextTaskUnblockTime+0x3c>)
 8003ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ec8:	e008      	b.n	8003edc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <prvResetNextTaskUnblockTime+0x38>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4a04      	ldr	r2, [pc, #16]	; (8003eec <prvResetNextTaskUnblockTime+0x3c>)
 8003eda:	6013      	str	r3, [r2, #0]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	200003d4 	.word	0x200003d4
 8003eec:	2000043c 	.word	0x2000043c

08003ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <xTaskGetSchedulerState+0x34>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003efe:	2301      	movs	r3, #1
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	e008      	b.n	8003f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <xTaskGetSchedulerState+0x38>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	607b      	str	r3, [r7, #4]
 8003f10:	e001      	b.n	8003f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f12:	2300      	movs	r3, #0
 8003f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f16:	687b      	ldr	r3, [r7, #4]
	}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	20000428 	.word	0x20000428
 8003f28:	20000444 	.word	0x20000444

08003f2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d05e      	beq.n	8004000 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f46:	4b31      	ldr	r3, [pc, #196]	; (800400c <xTaskPriorityInherit+0xe0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d24e      	bcs.n	8003fee <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	db06      	blt.n	8003f66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f58:	4b2c      	ldr	r3, [pc, #176]	; (800400c <xTaskPriorityInherit+0xe0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	f1c3 0207 	rsb	r2, r3, #7
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	6959      	ldr	r1, [r3, #20]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4a26      	ldr	r2, [pc, #152]	; (8004010 <xTaskPriorityInherit+0xe4>)
 8003f78:	4413      	add	r3, r2
 8003f7a:	4299      	cmp	r1, r3
 8003f7c:	d12f      	bne.n	8003fde <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	3304      	adds	r3, #4
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fdc4 	bl	8002b10 <uxListRemove>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	2201      	movs	r2, #1
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43da      	mvns	r2, r3
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <xTaskPriorityInherit+0xe8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <xTaskPriorityInherit+0xe8>)
 8003fa2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <xTaskPriorityInherit+0xe0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	4b17      	ldr	r3, [pc, #92]	; (8004014 <xTaskPriorityInherit+0xe8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	4a15      	ldr	r2, [pc, #84]	; (8004014 <xTaskPriorityInherit+0xe8>)
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4a10      	ldr	r2, [pc, #64]	; (8004010 <xTaskPriorityInherit+0xe4>)
 8003fce:	441a      	add	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	f7fe fd3d 	bl	8002a56 <vListInsertEnd>
 8003fdc:	e004      	b.n	8003fe8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <xTaskPriorityInherit+0xe0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	e008      	b.n	8004000 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff2:	4b06      	ldr	r3, [pc, #24]	; (800400c <xTaskPriorityInherit+0xe0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d201      	bcs.n	8004000 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004000:	68fb      	ldr	r3, [r7, #12]
	}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	2000031c 	.word	0x2000031c
 8004010:	20000320 	.word	0x20000320
 8004014:	20000424 	.word	0x20000424

08004018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d06e      	beq.n	800410c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800402e:	4b3a      	ldr	r3, [pc, #232]	; (8004118 <xTaskPriorityDisinherit+0x100>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d00a      	beq.n	800404e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	60fb      	str	r3, [r7, #12]
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	60bb      	str	r3, [r7, #8]
}
 8004068:	bf00      	nop
 800406a:	e7fe      	b.n	800406a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004070:	1e5a      	subs	r2, r3, #1
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	429a      	cmp	r2, r3
 8004080:	d044      	beq.n	800410c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004086:	2b00      	cmp	r3, #0
 8004088:	d140      	bne.n	800410c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	3304      	adds	r3, #4
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe fd3e 	bl	8002b10 <uxListRemove>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d115      	bne.n	80040c6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409e:	491f      	ldr	r1, [pc, #124]	; (800411c <xTaskPriorityDisinherit+0x104>)
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <xTaskPriorityDisinherit+0xae>
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	2201      	movs	r2, #1
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43da      	mvns	r2, r3
 80040bc:	4b18      	ldr	r3, [pc, #96]	; (8004120 <xTaskPriorityDisinherit+0x108>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4013      	ands	r3, r2
 80040c2:	4a17      	ldr	r2, [pc, #92]	; (8004120 <xTaskPriorityDisinherit+0x108>)
 80040c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	f1c3 0207 	rsb	r2, r3, #7
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	2201      	movs	r2, #1
 80040e0:	409a      	lsls	r2, r3
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <xTaskPriorityDisinherit+0x108>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	4a0d      	ldr	r2, [pc, #52]	; (8004120 <xTaskPriorityDisinherit+0x108>)
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4a08      	ldr	r2, [pc, #32]	; (800411c <xTaskPriorityDisinherit+0x104>)
 80040fa:	441a      	add	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3304      	adds	r3, #4
 8004100:	4619      	mov	r1, r3
 8004102:	4610      	mov	r0, r2
 8004104:	f7fe fca7 	bl	8002a56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004108:	2301      	movs	r3, #1
 800410a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800410c:	697b      	ldr	r3, [r7, #20]
	}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	2000031c 	.word	0x2000031c
 800411c:	20000320 	.word	0x20000320
 8004120:	20000424 	.word	0x20000424

08004124 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004132:	2301      	movs	r3, #1
 8004134:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d077      	beq.n	800422c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	60fb      	str	r3, [r7, #12]
}
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d902      	bls.n	800416a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e002      	b.n	8004170 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	429a      	cmp	r2, r3
 8004178:	d058      	beq.n	800422c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	429a      	cmp	r2, r3
 8004182:	d153      	bne.n	800422c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004184:	4b2b      	ldr	r3, [pc, #172]	; (8004234 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	429a      	cmp	r2, r3
 800418c:	d10a      	bne.n	80041a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	60bb      	str	r3, [r7, #8]
}
 80041a0:	bf00      	nop
 80041a2:	e7fe      	b.n	80041a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	db04      	blt.n	80041c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f1c3 0207 	rsb	r2, r3, #7
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	6959      	ldr	r1, [r3, #20]
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4a19      	ldr	r2, [pc, #100]	; (8004238 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80041d2:	4413      	add	r3, r2
 80041d4:	4299      	cmp	r1, r3
 80041d6:	d129      	bne.n	800422c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	3304      	adds	r3, #4
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe fc97 	bl	8002b10 <uxListRemove>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	2201      	movs	r2, #1
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	43da      	mvns	r2, r3
 80041f4:	4b11      	ldr	r3, [pc, #68]	; (800423c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4013      	ands	r3, r2
 80041fa:	4a10      	ldr	r2, [pc, #64]	; (800423c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80041fc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004202:	2201      	movs	r2, #1
 8004204:	409a      	lsls	r2, r3
 8004206:	4b0d      	ldr	r3, [pc, #52]	; (800423c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4313      	orrs	r3, r2
 800420c:	4a0b      	ldr	r2, [pc, #44]	; (800423c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4a06      	ldr	r2, [pc, #24]	; (8004238 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800421e:	441a      	add	r2, r3
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	3304      	adds	r3, #4
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f7fe fc15 	bl	8002a56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800422c:	bf00      	nop
 800422e:	3720      	adds	r7, #32
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	2000031c 	.word	0x2000031c
 8004238:	20000320 	.word	0x20000320
 800423c:	20000424 	.word	0x20000424

08004240 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <pvTaskIncrementMutexHeldCount+0x24>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d004      	beq.n	8004256 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <pvTaskIncrementMutexHeldCount+0x24>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004252:	3201      	adds	r2, #1
 8004254:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004256:	4b03      	ldr	r3, [pc, #12]	; (8004264 <pvTaskIncrementMutexHeldCount+0x24>)
 8004258:	681b      	ldr	r3, [r3, #0]
	}
 800425a:	4618      	mov	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	2000031c 	.word	0x2000031c

08004268 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004272:	4b29      	ldr	r3, [pc, #164]	; (8004318 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004278:	4b28      	ldr	r3, [pc, #160]	; (800431c <prvAddCurrentTaskToDelayedList+0xb4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3304      	adds	r3, #4
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fc46 	bl	8002b10 <uxListRemove>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10b      	bne.n	80042a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800428a:	4b24      	ldr	r3, [pc, #144]	; (800431c <prvAddCurrentTaskToDelayedList+0xb4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	2201      	movs	r2, #1
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43da      	mvns	r2, r3
 8004298:	4b21      	ldr	r3, [pc, #132]	; (8004320 <prvAddCurrentTaskToDelayedList+0xb8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4013      	ands	r3, r2
 800429e:	4a20      	ldr	r2, [pc, #128]	; (8004320 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d10a      	bne.n	80042c0 <prvAddCurrentTaskToDelayedList+0x58>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042b0:	4b1a      	ldr	r3, [pc, #104]	; (800431c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3304      	adds	r3, #4
 80042b6:	4619      	mov	r1, r3
 80042b8:	481a      	ldr	r0, [pc, #104]	; (8004324 <prvAddCurrentTaskToDelayedList+0xbc>)
 80042ba:	f7fe fbcc 	bl	8002a56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042be:	e026      	b.n	800430e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4413      	add	r3, r2
 80042c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042c8:	4b14      	ldr	r3, [pc, #80]	; (800431c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d209      	bcs.n	80042ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042d8:	4b13      	ldr	r3, [pc, #76]	; (8004328 <prvAddCurrentTaskToDelayedList+0xc0>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f7fe fbda 	bl	8002a9e <vListInsert>
}
 80042ea:	e010      	b.n	800430e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <prvAddCurrentTaskToDelayedList+0xc4>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f7fe fbd0 	bl	8002a9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042fe:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	d202      	bcs.n	800430e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004308:	4a09      	ldr	r2, [pc, #36]	; (8004330 <prvAddCurrentTaskToDelayedList+0xc8>)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6013      	str	r3, [r2, #0]
}
 800430e:	bf00      	nop
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000420 	.word	0x20000420
 800431c:	2000031c 	.word	0x2000031c
 8004320:	20000424 	.word	0x20000424
 8004324:	20000408 	.word	0x20000408
 8004328:	200003d8 	.word	0x200003d8
 800432c:	200003d4 	.word	0x200003d4
 8004330:	2000043c 	.word	0x2000043c

08004334 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3b04      	subs	r3, #4
 8004344:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800434c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3b04      	subs	r3, #4
 8004352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f023 0201 	bic.w	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3b04      	subs	r3, #4
 8004362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004364:	4a0c      	ldr	r2, [pc, #48]	; (8004398 <pxPortInitialiseStack+0x64>)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3b14      	subs	r3, #20
 800436e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3b04      	subs	r3, #4
 800437a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f06f 0202 	mvn.w	r2, #2
 8004382:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3b20      	subs	r3, #32
 8004388:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800438a:	68fb      	ldr	r3, [r7, #12]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	0800439d 	.word	0x0800439d

0800439c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <prvTaskExitError+0x54>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d00a      	beq.n	80043c6 <prvTaskExitError+0x2a>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	60fb      	str	r3, [r7, #12]
}
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <prvTaskExitError+0x28>
	__asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	60bb      	str	r3, [r7, #8]
}
 80043d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043da:	bf00      	nop
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0fc      	beq.n	80043dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043e2:	bf00      	nop
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	2000000c 	.word	0x2000000c
	...

08004400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004400:	4b07      	ldr	r3, [pc, #28]	; (8004420 <pxCurrentTCBConst2>)
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	6808      	ldr	r0, [r1, #0]
 8004406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440a:	f380 8809 	msr	PSP, r0
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f04f 0000 	mov.w	r0, #0
 8004416:	f380 8811 	msr	BASEPRI, r0
 800441a:	4770      	bx	lr
 800441c:	f3af 8000 	nop.w

08004420 <pxCurrentTCBConst2>:
 8004420:	2000031c 	.word	0x2000031c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop

08004428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004428:	4808      	ldr	r0, [pc, #32]	; (800444c <prvPortStartFirstTask+0x24>)
 800442a:	6800      	ldr	r0, [r0, #0]
 800442c:	6800      	ldr	r0, [r0, #0]
 800442e:	f380 8808 	msr	MSP, r0
 8004432:	f04f 0000 	mov.w	r0, #0
 8004436:	f380 8814 	msr	CONTROL, r0
 800443a:	b662      	cpsie	i
 800443c:	b661      	cpsie	f
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	df00      	svc	0
 8004448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800444a:	bf00      	nop
 800444c:	e000ed08 	.word	0xe000ed08

08004450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004456:	4b46      	ldr	r3, [pc, #280]	; (8004570 <xPortStartScheduler+0x120>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a46      	ldr	r2, [pc, #280]	; (8004574 <xPortStartScheduler+0x124>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d10a      	bne.n	8004476 <xPortStartScheduler+0x26>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	613b      	str	r3, [r7, #16]
}
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004476:	4b3e      	ldr	r3, [pc, #248]	; (8004570 <xPortStartScheduler+0x120>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a3f      	ldr	r2, [pc, #252]	; (8004578 <xPortStartScheduler+0x128>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d10a      	bne.n	8004496 <xPortStartScheduler+0x46>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	60fb      	str	r3, [r7, #12]
}
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004496:	4b39      	ldr	r3, [pc, #228]	; (800457c <xPortStartScheduler+0x12c>)
 8004498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	22ff      	movs	r2, #255	; 0xff
 80044a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	4b31      	ldr	r3, [pc, #196]	; (8004580 <xPortStartScheduler+0x130>)
 80044bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <xPortStartScheduler+0x134>)
 80044c0:	2207      	movs	r2, #7
 80044c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044c4:	e009      	b.n	80044da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80044c6:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <xPortStartScheduler+0x134>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	4a2d      	ldr	r2, [pc, #180]	; (8004584 <xPortStartScheduler+0x134>)
 80044ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d0ef      	beq.n	80044c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044e6:	4b27      	ldr	r3, [pc, #156]	; (8004584 <xPortStartScheduler+0x134>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f1c3 0307 	rsb	r3, r3, #7
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d00a      	beq.n	8004508 <xPortStartScheduler+0xb8>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	60bb      	str	r3, [r7, #8]
}
 8004504:	bf00      	nop
 8004506:	e7fe      	b.n	8004506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004508:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <xPortStartScheduler+0x134>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	4a1d      	ldr	r2, [pc, #116]	; (8004584 <xPortStartScheduler+0x134>)
 8004510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004512:	4b1c      	ldr	r3, [pc, #112]	; (8004584 <xPortStartScheduler+0x134>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800451a:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <xPortStartScheduler+0x134>)
 800451c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	b2da      	uxtb	r2, r3
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004526:	4b18      	ldr	r3, [pc, #96]	; (8004588 <xPortStartScheduler+0x138>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a17      	ldr	r2, [pc, #92]	; (8004588 <xPortStartScheduler+0x138>)
 800452c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004532:	4b15      	ldr	r3, [pc, #84]	; (8004588 <xPortStartScheduler+0x138>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a14      	ldr	r2, [pc, #80]	; (8004588 <xPortStartScheduler+0x138>)
 8004538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800453c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800453e:	f000 f8dd 	bl	80046fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004542:	4b12      	ldr	r3, [pc, #72]	; (800458c <xPortStartScheduler+0x13c>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004548:	f000 f8fc 	bl	8004744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <xPortStartScheduler+0x140>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a0f      	ldr	r2, [pc, #60]	; (8004590 <xPortStartScheduler+0x140>)
 8004552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004558:	f7ff ff66 	bl	8004428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800455c:	f7ff fa8c 	bl	8003a78 <vTaskSwitchContext>
	prvTaskExitError();
 8004560:	f7ff ff1c 	bl	800439c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	e000ed00 	.word	0xe000ed00
 8004574:	410fc271 	.word	0x410fc271
 8004578:	410fc270 	.word	0x410fc270
 800457c:	e000e400 	.word	0xe000e400
 8004580:	20000448 	.word	0x20000448
 8004584:	2000044c 	.word	0x2000044c
 8004588:	e000ed20 	.word	0xe000ed20
 800458c:	2000000c 	.word	0x2000000c
 8004590:	e000ef34 	.word	0xe000ef34

08004594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
	__asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	607b      	str	r3, [r7, #4]
}
 80045ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <vPortEnterCritical+0x58>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3301      	adds	r3, #1
 80045b4:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <vPortEnterCritical+0x58>)
 80045b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <vPortEnterCritical+0x58>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d10f      	bne.n	80045e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <vPortEnterCritical+0x5c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	603b      	str	r3, [r7, #0]
}
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <vPortEnterCritical+0x4a>
	}
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	2000000c 	.word	0x2000000c
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <vPortExitCritical+0x50>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <vPortExitCritical+0x24>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	607b      	str	r3, [r7, #4]
}
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <vPortExitCritical+0x50>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3b01      	subs	r3, #1
 800461e:	4a09      	ldr	r2, [pc, #36]	; (8004644 <vPortExitCritical+0x50>)
 8004620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <vPortExitCritical+0x50>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <vPortExitCritical+0x42>
 800462a:	2300      	movs	r3, #0
 800462c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	2000000c 	.word	0x2000000c
	...

08004650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004650:	f3ef 8009 	mrs	r0, PSP
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <pxCurrentTCBConst>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	f01e 0f10 	tst.w	lr, #16
 8004660:	bf08      	it	eq
 8004662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466a:	6010      	str	r0, [r2, #0]
 800466c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004674:	f380 8811 	msr	BASEPRI, r0
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f7ff f9fa 	bl	8003a78 <vTaskSwitchContext>
 8004684:	f04f 0000 	mov.w	r0, #0
 8004688:	f380 8811 	msr	BASEPRI, r0
 800468c:	bc09      	pop	{r0, r3}
 800468e:	6819      	ldr	r1, [r3, #0]
 8004690:	6808      	ldr	r0, [r1, #0]
 8004692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004696:	f01e 0f10 	tst.w	lr, #16
 800469a:	bf08      	it	eq
 800469c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046a0:	f380 8809 	msr	PSP, r0
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	f3af 8000 	nop.w

080046b0 <pxCurrentTCBConst>:
 80046b0:	2000031c 	.word	0x2000031c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop

080046b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	607b      	str	r3, [r7, #4]
}
 80046d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046d2:	f7ff f919 	bl	8003908 <xTaskIncrementTick>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <SysTick_Handler+0x40>)
 80046de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	2300      	movs	r3, #0
 80046e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	f383 8811 	msr	BASEPRI, r3
}
 80046ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <vPortSetupTimerInterrupt+0x34>)
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004706:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <vPortSetupTimerInterrupt+0x38>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <vPortSetupTimerInterrupt+0x3c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a0a      	ldr	r2, [pc, #40]	; (800473c <vPortSetupTimerInterrupt+0x40>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	099b      	lsrs	r3, r3, #6
 8004718:	4a09      	ldr	r2, [pc, #36]	; (8004740 <vPortSetupTimerInterrupt+0x44>)
 800471a:	3b01      	subs	r3, #1
 800471c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800471e:	4b04      	ldr	r3, [pc, #16]	; (8004730 <vPortSetupTimerInterrupt+0x34>)
 8004720:	2207      	movs	r2, #7
 8004722:	601a      	str	r2, [r3, #0]
}
 8004724:	bf00      	nop
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	e000e010 	.word	0xe000e010
 8004734:	e000e018 	.word	0xe000e018
 8004738:	20000000 	.word	0x20000000
 800473c:	10624dd3 	.word	0x10624dd3
 8004740:	e000e014 	.word	0xe000e014

08004744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004754 <vPortEnableVFP+0x10>
 8004748:	6801      	ldr	r1, [r0, #0]
 800474a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800474e:	6001      	str	r1, [r0, #0]
 8004750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004752:	bf00      	nop
 8004754:	e000ed88 	.word	0xe000ed88

08004758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08a      	sub	sp, #40	; 0x28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004760:	2300      	movs	r3, #0
 8004762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004764:	f7ff f826 	bl	80037b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004768:	4b5b      	ldr	r3, [pc, #364]	; (80048d8 <pvPortMalloc+0x180>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004770:	f000 f920 	bl	80049b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <pvPortMalloc+0x184>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	f040 8093 	bne.w	80048a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01d      	beq.n	80047c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004788:	2208      	movs	r2, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4413      	add	r3, r2
 800478e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	2b00      	cmp	r3, #0
 8004798:	d014      	beq.n	80047c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f023 0307 	bic.w	r3, r3, #7
 80047a0:	3308      	adds	r3, #8
 80047a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <pvPortMalloc+0x6c>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	617b      	str	r3, [r7, #20]
}
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d06e      	beq.n	80048a8 <pvPortMalloc+0x150>
 80047ca:	4b45      	ldr	r3, [pc, #276]	; (80048e0 <pvPortMalloc+0x188>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d869      	bhi.n	80048a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047d4:	4b43      	ldr	r3, [pc, #268]	; (80048e4 <pvPortMalloc+0x18c>)
 80047d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047d8:	4b42      	ldr	r3, [pc, #264]	; (80048e4 <pvPortMalloc+0x18c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047de:	e004      	b.n	80047ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d903      	bls.n	80047fc <pvPortMalloc+0xa4>
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f1      	bne.n	80047e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047fc:	4b36      	ldr	r3, [pc, #216]	; (80048d8 <pvPortMalloc+0x180>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004802:	429a      	cmp	r2, r3
 8004804:	d050      	beq.n	80048a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2208      	movs	r2, #8
 800480c:	4413      	add	r3, r2
 800480e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	1ad2      	subs	r2, r2, r3
 8004820:	2308      	movs	r3, #8
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	429a      	cmp	r2, r3
 8004826:	d91f      	bls.n	8004868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4413      	add	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <pvPortMalloc+0xf8>
	__asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	613b      	str	r3, [r7, #16]
}
 800484c:	bf00      	nop
 800484e:	e7fe      	b.n	800484e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	1ad2      	subs	r2, r2, r3
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004862:	69b8      	ldr	r0, [r7, #24]
 8004864:	f000 f908 	bl	8004a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004868:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <pvPortMalloc+0x188>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <pvPortMalloc+0x188>)
 8004874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004876:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <pvPortMalloc+0x188>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <pvPortMalloc+0x190>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d203      	bcs.n	800488a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004882:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <pvPortMalloc+0x188>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a18      	ldr	r2, [pc, #96]	; (80048e8 <pvPortMalloc+0x190>)
 8004888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	4b13      	ldr	r3, [pc, #76]	; (80048dc <pvPortMalloc+0x184>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	431a      	orrs	r2, r3
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <pvPortMalloc+0x194>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3301      	adds	r3, #1
 80048a4:	4a11      	ldr	r2, [pc, #68]	; (80048ec <pvPortMalloc+0x194>)
 80048a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048a8:	f7fe ff92 	bl	80037d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <pvPortMalloc+0x174>
	__asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	60fb      	str	r3, [r7, #12]
}
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <pvPortMalloc+0x172>
	return pvReturn;
 80048cc:	69fb      	ldr	r3, [r7, #28]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3728      	adds	r7, #40	; 0x28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20004058 	.word	0x20004058
 80048dc:	2000406c 	.word	0x2000406c
 80048e0:	2000405c 	.word	0x2000405c
 80048e4:	20004050 	.word	0x20004050
 80048e8:	20004060 	.word	0x20004060
 80048ec:	20004064 	.word	0x20004064

080048f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d04d      	beq.n	800499e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004902:	2308      	movs	r3, #8
 8004904:	425b      	negs	r3, r3
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4413      	add	r3, r2
 800490a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <vPortFree+0xb8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10a      	bne.n	8004934 <vPortFree+0x44>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	60fb      	str	r3, [r7, #12]
}
 8004930:	bf00      	nop
 8004932:	e7fe      	b.n	8004932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <vPortFree+0x62>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	60bb      	str	r3, [r7, #8]
}
 800494e:	bf00      	nop
 8004950:	e7fe      	b.n	8004950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <vPortFree+0xb8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01e      	beq.n	800499e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d11a      	bne.n	800499e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <vPortFree+0xb8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	43db      	mvns	r3, r3
 8004972:	401a      	ands	r2, r3
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004978:	f7fe ff1c 	bl	80037b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <vPortFree+0xbc>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4413      	add	r3, r2
 8004986:	4a09      	ldr	r2, [pc, #36]	; (80049ac <vPortFree+0xbc>)
 8004988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800498a:	6938      	ldr	r0, [r7, #16]
 800498c:	f000 f874 	bl	8004a78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <vPortFree+0xc0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3301      	adds	r3, #1
 8004996:	4a06      	ldr	r2, [pc, #24]	; (80049b0 <vPortFree+0xc0>)
 8004998:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800499a:	f7fe ff19 	bl	80037d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800499e:	bf00      	nop
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	2000406c 	.word	0x2000406c
 80049ac:	2000405c 	.word	0x2000405c
 80049b0:	20004068 	.word	0x20004068

080049b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80049be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049c0:	4b27      	ldr	r3, [pc, #156]	; (8004a60 <prvHeapInit+0xac>)
 80049c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00c      	beq.n	80049e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3307      	adds	r3, #7
 80049d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0307 	bic.w	r3, r3, #7
 80049da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	4a1f      	ldr	r2, [pc, #124]	; (8004a60 <prvHeapInit+0xac>)
 80049e4:	4413      	add	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049ec:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <prvHeapInit+0xb0>)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049f2:	4b1c      	ldr	r3, [pc, #112]	; (8004a64 <prvHeapInit+0xb0>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	4413      	add	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a00:	2208      	movs	r2, #8
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0307 	bic.w	r3, r3, #7
 8004a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4a15      	ldr	r2, [pc, #84]	; (8004a68 <prvHeapInit+0xb4>)
 8004a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a16:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <prvHeapInit+0xb4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a1e:	4b12      	ldr	r3, [pc, #72]	; (8004a68 <prvHeapInit+0xb4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	1ad2      	subs	r2, r2, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <prvHeapInit+0xb4>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <prvHeapInit+0xb8>)
 8004a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	4a09      	ldr	r2, [pc, #36]	; (8004a70 <prvHeapInit+0xbc>)
 8004a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <prvHeapInit+0xc0>)
 8004a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a52:	601a      	str	r2, [r3, #0]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	20000450 	.word	0x20000450
 8004a64:	20004050 	.word	0x20004050
 8004a68:	20004058 	.word	0x20004058
 8004a6c:	20004060 	.word	0x20004060
 8004a70:	2000405c 	.word	0x2000405c
 8004a74:	2000406c 	.word	0x2000406c

08004a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a80:	4b28      	ldr	r3, [pc, #160]	; (8004b24 <prvInsertBlockIntoFreeList+0xac>)
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e002      	b.n	8004a8c <prvInsertBlockIntoFreeList+0x14>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d8f7      	bhi.n	8004a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d108      	bne.n	8004aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	441a      	add	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	441a      	add	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d118      	bne.n	8004b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <prvInsertBlockIntoFreeList+0xb0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d00d      	beq.n	8004af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	441a      	add	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	e008      	b.n	8004b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <prvInsertBlockIntoFreeList+0xb0>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e003      	b.n	8004b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d002      	beq.n	8004b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b16:	bf00      	nop
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20004050 	.word	0x20004050
 8004b28:	20004058 	.word	0x20004058

08004b2c <__libc_init_array>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	4d0d      	ldr	r5, [pc, #52]	; (8004b64 <__libc_init_array+0x38>)
 8004b30:	4c0d      	ldr	r4, [pc, #52]	; (8004b68 <__libc_init_array+0x3c>)
 8004b32:	1b64      	subs	r4, r4, r5
 8004b34:	10a4      	asrs	r4, r4, #2
 8004b36:	2600      	movs	r6, #0
 8004b38:	42a6      	cmp	r6, r4
 8004b3a:	d109      	bne.n	8004b50 <__libc_init_array+0x24>
 8004b3c:	4d0b      	ldr	r5, [pc, #44]	; (8004b6c <__libc_init_array+0x40>)
 8004b3e:	4c0c      	ldr	r4, [pc, #48]	; (8004b70 <__libc_init_array+0x44>)
 8004b40:	f000 f82e 	bl	8004ba0 <_init>
 8004b44:	1b64      	subs	r4, r4, r5
 8004b46:	10a4      	asrs	r4, r4, #2
 8004b48:	2600      	movs	r6, #0
 8004b4a:	42a6      	cmp	r6, r4
 8004b4c:	d105      	bne.n	8004b5a <__libc_init_array+0x2e>
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b54:	4798      	blx	r3
 8004b56:	3601      	adds	r6, #1
 8004b58:	e7ee      	b.n	8004b38 <__libc_init_array+0xc>
 8004b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b5e:	4798      	blx	r3
 8004b60:	3601      	adds	r6, #1
 8004b62:	e7f2      	b.n	8004b4a <__libc_init_array+0x1e>
 8004b64:	08004c80 	.word	0x08004c80
 8004b68:	08004c80 	.word	0x08004c80
 8004b6c:	08004c80 	.word	0x08004c80
 8004b70:	08004c84 	.word	0x08004c84

08004b74 <memcpy>:
 8004b74:	440a      	add	r2, r1
 8004b76:	4291      	cmp	r1, r2
 8004b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b7c:	d100      	bne.n	8004b80 <memcpy+0xc>
 8004b7e:	4770      	bx	lr
 8004b80:	b510      	push	{r4, lr}
 8004b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b8a:	4291      	cmp	r1, r2
 8004b8c:	d1f9      	bne.n	8004b82 <memcpy+0xe>
 8004b8e:	bd10      	pop	{r4, pc}

08004b90 <memset>:
 8004b90:	4402      	add	r2, r0
 8004b92:	4603      	mov	r3, r0
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d100      	bne.n	8004b9a <memset+0xa>
 8004b98:	4770      	bx	lr
 8004b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b9e:	e7f9      	b.n	8004b94 <memset+0x4>

08004ba0 <_init>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	bf00      	nop
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr

08004bac <_fini>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	bf00      	nop
 8004bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb2:	bc08      	pop	{r3}
 8004bb4:	469e      	mov	lr, r3
 8004bb6:	4770      	bx	lr
